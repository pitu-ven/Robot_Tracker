# ui/target_tab.py
# Version 2.1 - Correction d√©tection cam√©ra active via CameraManager
# Modification: Utilisation directe CameraManager pour d√©tecter cam√©ras actives

import cv2
import numpy as np
import time
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import logging

from PyQt6.QtWidgets import (
    QWidget, QHBoxLayout, QVBoxLayout, QGridLayout, QSplitter,
    QGroupBox, QPushButton, QLabel, QComboBox, QSpinBox, QCheckBox,
    QLineEdit, QTextEdit, QProgressBar, QFileDialog, QMessageBox,
    QTableWidget, QTableWidgetItem, QHeaderView, QSlider, QFrame
)
from PyQt6.QtCore import Qt, QTimer, pyqtSignal, QThread, QSize
from PyQt6.QtGui import QPixmap, QImage, QFont, QIcon, QPainter, QPen, QColor

# Import avec fallback pour √©viter les erreurs d'import relatif
try:
    from core.aruco_config_loader import ArUcoConfigLoader
    from core.target_detector import TargetDetector, TargetType
    from core.roi_manager import ROIManager, ROIType
except ImportError:
    # Stubs temporaires pour √©viter les erreurs lors du d√©veloppement
    class ArUcoConfigLoader:
        def __init__(self, config): self.detected_markers = {}
        def scan_aruco_folder(self, folder_path): return {}
        def get_detector_params(self): return {}
    
    class TargetDetector:
        def __init__(self, config): 
            self.detection_enabled = {'aruco': True, 'reflective': True, 'led': True}
        def detect(self, frame): return [], []
        def set_roi(self, roi): pass
    
    class TargetType:
        ARUCO = "aruco"
        REFLECTIVE = "reflective"
        LED = "led"
    
    class ROIManager:
        def __init__(self, config_manager): 
            self.is_creating = False
            self.rois = []
        def start_roi_creation(self, roi_type): self.is_creating = True
        def add_point(self, point): pass
        def finish_roi(self): self.is_creating = False

    class ROIType:
        RECTANGLE = "rectangle"
        POLYGON = "polygon"

logger = logging.getLogger(__name__)

class TargetTab(QWidget):
    """Onglet Cible - Focus d√©tection/suivi avec d√©tection automatique cam√©ra"""
    
    # Signaux
    target_detected = pyqtSignal(dict)       # Signal cible d√©tect√©e
    tracking_started = pyqtSignal()          # Signal tracking d√©marr√©
    tracking_stopped = pyqtSignal()          # Signal tracking arr√™t√©
    status_changed = pyqtSignal(dict)        # Signal changement d'√©tat
    
    def __init__(self, config_manager, camera_manager, parent=None):
        super().__init__(parent)
        
        # Configuration et managers
        self.config = config_manager
        self.camera_manager = camera_manager  # R√©f√©rence au manager centralis√©
        
        # √âtat de l'onglet
        self.is_tracking = False
        self.current_frame = None
        self.current_depth_frame = None
        self.camera_ready = False
        self.selected_camera_alias = None
        
        # Donn√©es de tracking
        self.detected_targets = []
        self.tracking_history = []
        self.detection_stats = {
            'total_detections': 0,
            'fps': 0.0,
            'last_detection_time': 0.0
        }
        
        # Composants de d√©tection
        self._init_detection_components()
        
        # Interface utilisateur
        self._setup_ui()
        self._connect_internal_signals()
        
        # Timer pour le traitement des frames
        self.processing_timer = QTimer()
        self.processing_timer.timeout.connect(self._process_current_frame)
        
        # Timer pour v√©rifier l'√©tat des cam√©ras
        self.camera_check_timer = QTimer()
        self.camera_check_timer.timeout.connect(self._check_camera_status)
        self.camera_check_timer.start(1000)  # V√©rification chaque seconde
        
        version = self._safe_get_config('ui', 'target_tab.version', '2.1')
        logger.info(f"üéØ TargetTab v{version} initialis√© (d√©tection auto cam√©ra)")
        
        # V√©rification initiale de l'√©tat des cam√©ras
        self._check_camera_status()
    
    def _init_detection_components(self):
        """Initialise les composants de d√©tection"""
        try:
            self.aruco_loader = ArUcoConfigLoader(self.config)
            self.target_detector = TargetDetector(self.config)
            self.roi_manager = ROIManager(self.config)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Composants d√©tection non disponibles: {e}")
            # Fallback avec stubs
            self.aruco_loader = ArUcoConfigLoader(self.config)
            self.target_detector = TargetDetector(self.config)
            self.roi_manager = ROIManager(self.config)
    
    def _safe_get_config(self, section: str, key: str, default=None):
        """Acc√®s s√©curis√© √† la configuration"""
        try:
            return self.config.get(section, key, default) if hasattr(self.config, 'get') else default
        except Exception:
            return default
    
    def _setup_ui(self):
        """Configure l'interface utilisateur simplifi√©e"""
        main_layout = QHBoxLayout(self)
        
        # Panneau de contr√¥le (gauche) - Focus d√©tection
        control_panel = self._create_control_panel()
        control_width = self._safe_get_config('ui', 'target_tab.layout.control_panel_width', 320)
        control_panel.setMaximumWidth(control_width)
        
        # Zone d'affichage (droite) - Flux cam√©ra + overlays
        display_area = self._create_display_area()
        
        main_layout.addWidget(control_panel)
        main_layout.addWidget(display_area, 1)
    
    def _create_control_panel(self):
        """Cr√©e le panneau de contr√¥le focalis√© sur la d√©tection"""
        panel = QWidget()
        layout = QVBoxLayout(panel)
        
        # 1. √âtat de la cam√©ra (d√©tection automatique)
        camera_status_group = self._create_camera_status_group()
        layout.addWidget(camera_status_group)
        
        # 2. Configuration ArUco
        aruco_group = self._create_aruco_config_group()
        layout.addWidget(aruco_group)
        
        # 3. Types de d√©tection
        detection_types_group = self._create_detection_types_group()
        layout.addWidget(detection_types_group)
        
        # 4. Outils ROI
        roi_tools_group = self._create_roi_tools_group()
        layout.addWidget(roi_tools_group)
        
        # 5. Contr√¥les tracking
        tracking_controls_group = self._create_tracking_controls_group()
        layout.addWidget(tracking_controls_group)
        
        # 6. Statistiques
        stats_group = self._create_stats_group()
        layout.addWidget(stats_group)
        
        layout.addStretch()  # Pousse tout vers le haut
        
        return panel
    
    def _create_camera_status_group(self):
        """Groupe d'affichage de l'√©tat cam√©ra (d√©tection automatique)"""
        group = QGroupBox("üì∑ √âtat Cam√©ra")
        layout = QVBoxLayout(group)
        
        self.camera_status_label = QLabel("‚ùå Aucune cam√©ra active")
        self.camera_status_label.setStyleSheet("color: red; font-weight: bold;")
        layout.addWidget(self.camera_status_label)
        
        self.camera_info_label = QLabel("V√©rification automatique via CameraManager...")
        self.camera_info_label.setStyleSheet("color: gray; font-style: italic;")
        layout.addWidget(self.camera_info_label)
        
        # Bouton refresh manuel
        self.refresh_camera_btn = QPushButton("üîÑ Actualiser √âtat Cam√©ra")
        self.refresh_camera_btn.clicked.connect(self._check_camera_status)
        layout.addWidget(self.refresh_camera_btn)
        
        return group
    
    def _check_camera_status(self):
        """V√©rifie l'√©tat des cam√©ras via CameraManager"""
        try:
            # R√©cup√©ration des cam√©ras actives depuis CameraManager (LISTE d'alias)
            active_cameras = self.camera_manager.active_cameras
            
            if not active_cameras:
                # Aucune cam√©ra active
                self.camera_ready = False
                self.selected_camera_alias = None
                self.camera_status_label.setText("‚ùå Aucune cam√©ra active")
                self.camera_status_label.setStyleSheet("color: red; font-weight: bold;")
                self.camera_info_label.setText("D√©marrez une cam√©ra dans l'onglet Cam√©ra")
                
            else:
                # Au moins une cam√©ra active
                self.camera_ready = True
                
                # Prendre la premi√®re cam√©ra active par d√©faut
                if not self.selected_camera_alias or self.selected_camera_alias not in active_cameras:
                    self.selected_camera_alias = active_cameras[0]
                
                # R√©cup√©ration des infos de la cam√©ra depuis detected cameras
                camera_info = self.camera_manager.get_camera_info(self.selected_camera_alias)
                
                if camera_info:
                    camera_name = camera_info.get('name', self.selected_camera_alias)
                else:
                    camera_name = self.selected_camera_alias
                
                self.camera_status_label.setText(f"‚úÖ Cam√©ra: {camera_name}")
                self.camera_status_label.setStyleSheet("color: green; font-weight: bold;")
                self.camera_info_label.setText(f"Alias: {self.selected_camera_alias}")
                
                logger.debug(f"üì∑ Cam√©ra active d√©tect√©e: {self.selected_camera_alias} ({camera_name})")
            
            # Mise √† jour des contr√¥les
            self._update_tracking_controls_state()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification √©tat cam√©ra: {e}")
            self.camera_ready = False
            self.camera_status_label.setText("‚ùå Erreur d√©tection cam√©ra")
            self.camera_status_label.setStyleSheet("color: red; font-weight: bold;")
            self.camera_info_label.setText(f"Erreur: {str(e)}")
    
    def _create_aruco_config_group(self):
        """Groupe de configuration ArUco"""
        group = QGroupBox("üéØ Configuration ArUco")
        layout = QVBoxLayout(group)
        
        # S√©lection dossier
        folder_layout = QHBoxLayout()
        self.aruco_folder_btn = QPushButton("üìÅ S√©lectionner Dossier")
        self.aruco_folder_btn.clicked.connect(self._select_aruco_folder)
        folder_layout.addWidget(self.aruco_folder_btn)
        
        self.rescan_btn = QPushButton("üîÑ")
        self.rescan_btn.setEnabled(False)
        self.rescan_btn.clicked.connect(self._rescan_aruco_folder)
        self.rescan_btn.setFixedWidth(40)
        folder_layout.addWidget(self.rescan_btn)
        layout.addLayout(folder_layout)
        
        # Chemin dossier
        self.aruco_path_label = QLabel("Aucun dossier s√©lectionn√©")
        self.aruco_path_label.setStyleSheet("color: gray; font-size: 10px;")
        layout.addWidget(self.aruco_path_label)
        
        # Liste marqueurs d√©tect√©s
        self.markers_info_label = QLabel("Marqueurs: 0 d√©tect√©s")
        layout.addWidget(self.markers_info_label)
        
        # Bouton configuration avanc√©e
        self.config_btn = QPushButton("‚öôÔ∏è Configuration Avanc√©e")
        self.config_btn.setEnabled(False)
        self.config_btn.clicked.connect(self._show_aruco_advanced_config)
        layout.addWidget(self.config_btn)
        
        return group
    
    def _create_detection_types_group(self):
        """Groupe de s√©lection des types de d√©tection"""
        group = QGroupBox("üîç Types de D√©tection")
        layout = QVBoxLayout(group)
        
        self.aruco_check = QCheckBox("ArUco Markers")
        self.aruco_check.setChecked(True)
        self.aruco_check.toggled.connect(self._toggle_detection_type)
        layout.addWidget(self.aruco_check)
        
        self.reflective_check = QCheckBox("Marqueurs R√©fl√©chissants")
        self.reflective_check.setChecked(True)
        self.reflective_check.toggled.connect(self._toggle_detection_type)
        layout.addWidget(self.reflective_check)
        
        self.led_check = QCheckBox("LEDs Color√©es")
        self.led_check.setChecked(False)
        self.led_check.toggled.connect(self._toggle_detection_type)
        layout.addWidget(self.led_check)
        
        return group
    
    def _create_roi_tools_group(self):
        """Groupe d'outils ROI"""
        group = QGroupBox("üìê Outils ROI")
        layout = QVBoxLayout(group)
        
        # Boutons outils
        tools_layout = QHBoxLayout()
        self.roi_rect_btn = QPushButton("‚¨ú Rectangle")
        self.roi_rect_btn.clicked.connect(lambda: self._start_roi_creation(ROIType.RECTANGLE))
        tools_layout.addWidget(self.roi_rect_btn)
        
        self.roi_polygon_btn = QPushButton("‚¨ü Polygone")
        self.roi_polygon_btn.clicked.connect(lambda: self._start_roi_creation(ROIType.POLYGON))
        tools_layout.addWidget(self.roi_polygon_btn)
        layout.addLayout(tools_layout)
        
        # Actions ROI
        actions_layout = QHBoxLayout()
        self.clear_roi_btn = QPushButton("üóëÔ∏è Effacer")
        self.clear_roi_btn.clicked.connect(self._clear_rois)
        actions_layout.addWidget(self.clear_roi_btn)
        
        self.roi_info_label = QLabel("ROI: 0 actives")
        actions_layout.addWidget(self.roi_info_label)
        layout.addLayout(actions_layout)
        
        return group
    
    def _create_tracking_controls_group(self):
        """Groupe de contr√¥les du tracking"""
        group = QGroupBox("üé¨ Contr√¥les Tracking")
        layout = QVBoxLayout(group)
        
        # Boutons principaux
        buttons_layout = QHBoxLayout()
        self.start_tracking_btn = QPushButton("‚ñ∂Ô∏è D√©marrer")
        self.start_tracking_btn.clicked.connect(self._start_tracking)
        self.start_tracking_btn.setEnabled(False)
        buttons_layout.addWidget(self.start_tracking_btn)
        
        self.stop_tracking_btn = QPushButton("‚èπÔ∏è Arr√™ter")
        self.stop_tracking_btn.clicked.connect(self._stop_tracking)
        self.stop_tracking_btn.setEnabled(False)
        buttons_layout.addWidget(self.stop_tracking_btn)
        layout.addLayout(buttons_layout)
        
        # Param√®tres
        params_layout = QGridLayout()
        params_layout.addWidget(QLabel("FPS Cible:"), 0, 0)
        self.fps_spin = QSpinBox()
        self.fps_spin.setRange(5, 60)
        self.fps_spin.setValue(30)
        self.fps_spin.valueChanged.connect(self._update_fps_target)
        params_layout.addWidget(self.fps_spin, 0, 1)
        
        params_layout.addWidget(QLabel("Confiance:"), 1, 0)
        self.confidence_spin = QSpinBox()
        self.confidence_spin.setRange(50, 99)
        self.confidence_spin.setValue(80)
        self.confidence_spin.setSuffix("%")
        params_layout.addWidget(self.confidence_spin, 1, 1)
        layout.addLayout(params_layout)
        
        return group
    
    def _create_stats_group(self):
        """Groupe de statistiques"""
        group = QGroupBox("üìä Statistiques")
        layout = QVBoxLayout(group)
        
        self.targets_label = QLabel("Cibles: 0 d√©tect√©es")
        layout.addWidget(self.targets_label)
        
        self.fps_label = QLabel("FPS: 0.0")
        layout.addWidget(self.fps_label)
        
        self.history_label = QLabel("Historique: 0 points")
        layout.addWidget(self.history_label)
        
        return group
    
    def _create_display_area(self):
        """Cr√©e la zone d'affichage vid√©o"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Zone d'affichage principale
        self.camera_display = QLabel()
        self.camera_display.setStyleSheet("border: 1px solid gray; background-color: black;")
        self.camera_display.setScaledContents(True)
        self.camera_display.setMinimumHeight(480)
        self.camera_display.setText("En attente du flux cam√©ra...")
        self.camera_display.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # √âv√©nements souris pour ROI
        self.camera_display.mousePressEvent = self._on_display_click
        self.camera_display.mouseMoveEvent = self._on_display_move
        
        layout.addWidget(self.camera_display)
        
        # Barre de contr√¥les d'affichage
        controls_layout = QHBoxLayout()
        
        # Zoom
        controls_layout.addWidget(QLabel("Zoom:"))
        self.zoom_slider = QSlider(Qt.Orientation.Horizontal)
        self.zoom_slider.setRange(25, 400)
        self.zoom_slider.setValue(100)
        self.zoom_slider.valueChanged.connect(self._update_zoom)
        controls_layout.addWidget(self.zoom_slider)
        
        self.zoom_label = QLabel("100%")
        controls_layout.addWidget(self.zoom_label)
        
        controls_layout.addStretch()
        
        # Export
        self.export_btn = QPushButton("üíæ Exporter Donn√©es")
        self.export_btn.clicked.connect(self._export_tracking_data)
        self.export_btn.setEnabled(False)
        controls_layout.addWidget(self.export_btn)
        
        layout.addLayout(controls_layout)
        
        return widget
    
    def _connect_internal_signals(self):
        """Connecte les signaux internes de l'onglet"""
        pass  # Les connexions sont d√©j√† faites dans les cr√©ations de widgets
    
    # === SLOTS POUR COMMUNICATION INTER-ONGLETS ===
    
    def _on_camera_changed(self, camera_alias: str):
        """Slot appel√© quand la cam√©ra change (via camera_opened signal)"""
        logger.info(f"üì∑ Signal cam√©ra chang√©e re√ßu: {camera_alias}")
        
        # Force une v√©rification de l'√©tat
        self._check_camera_status()
    
    def _on_streaming_started(self):
        """Slot appel√© quand le streaming d√©marre dans l'onglet Cam√©ra"""
        logger.info("üé¨ Signal streaming d√©marr√© re√ßu")
        
        # Force une v√©rification de l'√©tat
        self._check_camera_status()
        
        # Si une cam√©ra est disponible, d√©marrer le traitement
        if self.camera_ready and self.selected_camera_alias:
            fps_target = self.fps_spin.value()
            interval_ms = int(1000 / fps_target)
            self.processing_timer.start(interval_ms)
            logger.info(f"üé¨ Traitement frames d√©marr√© √† {fps_target}fps")
    
    def _on_streaming_stopped(self):
        """Slot appel√© quand le streaming s'arr√™te"""
        logger.info("‚èπÔ∏è Signal streaming arr√™t√© re√ßu")
        
        # Arr√™t du processing
        self.processing_timer.stop()
        if self.is_tracking:
            self._stop_tracking()
        
        # Reset affichage
        self.camera_display.setText("En attente du flux cam√©ra...")
        
        # Force une v√©rification de l'√©tat
        self._check_camera_status()
    
    # === M√âTHODES DE TRAITEMENT ===
    
    def _process_current_frame(self):
        """Traite la frame courante du CameraManager"""
        if not self.camera_ready or not self.selected_camera_alias:
            return
        
        try:
            # R√©cup√©ration frame depuis CameraManager centralis√©
            success, frame, depth_frame = self.camera_manager.get_camera_frame(self.selected_camera_alias)
            
            if success and frame is not None:
                self.current_frame = frame.copy()
                self.current_depth_frame = depth_frame
                
                # Traitement de d√©tection si tracking actif
                if self.is_tracking:
                    self._detect_targets_in_frame()
                
                # Affichage avec overlays
                self._update_display()
            else:
                # Frame non disponible - v√©rifier si cam√©ra toujours active
                if not self.camera_manager.is_camera_open(self.selected_camera_alias):
                    logger.warning(f"‚ö†Ô∏è Cam√©ra {self.selected_camera_alias} non disponible")
                    self._check_camera_status()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement frame: {e}")
            # Re-v√©rifier l'√©tat en cas d'erreur
            self._check_camera_status()
    
    def _detect_targets_in_frame(self):
        """Effectue la d√©tection des cibles dans la frame courante"""
        if self.current_frame is None:
            return
        
        try:
            # Appel du d√©tecteur (√† impl√©menter compl√®tement dans target_detector.py)
            detected_targets, detection_info = self.target_detector.detect(self.current_frame)
            
            self.detected_targets = detected_targets
            
            # Mise √† jour des statistiques
            self._update_detection_stats(detection_info)
            
            # √âmission du signal pour autres onglets
            if detected_targets:
                self.target_detected.emit({
                    'targets': detected_targets,
                    'frame_info': detection_info,
                    'timestamp': time.time()
                })
        
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©tection: {e}")
    
    def _update_display(self):
        """Met √† jour l'affichage avec la frame et les overlays"""
        if self.current_frame is None:
            return
        
        try:
            display_frame = self.current_frame.copy()
            
            # Ajout des overlays
            self._draw_overlays(display_frame)
            
            # Conversion pour affichage Qt
            height, width, channel = display_frame.shape
            bytes_per_line = 3 * width
            q_image = QImage(display_frame.data, width, height, bytes_per_line, QImage.Format.Format_RGB888).rgbSwapped()
            
            # Application du zoom
            zoom_factor = self.zoom_slider.value() / 100.0
            if zoom_factor != 1.0:
                q_image = q_image.scaled(int(width * zoom_factor), int(height * zoom_factor), 
                                       Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation)
            
            pixmap = QPixmap.fromImage(q_image)
            self.camera_display.setPixmap(pixmap)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur affichage: {e}")
    
    def _draw_overlays(self, frame):
        """Dessine les overlays sur la frame"""
        if not hasattr(self, 'detected_targets'):
            return
        
        # ROI actives
        for roi in self.roi_manager.rois:
            color = (0, 255, 255)  # Jaune
            thickness = 2
            # Dessiner selon le type de ROI (rectangle, polygone, etc.)
            # TODO: Impl√©menter le dessin des ROI
        
        # Cibles d√©tect√©es
        for target in self.detected_targets:
            # TODO: Dessiner les cibles selon leur type
            pass
    
    def _update_detection_stats(self, detection_info):
        """Met √† jour les statistiques de d√©tection"""
        self.detection_stats['total_detections'] += len(self.detected_targets)
        
        # Calcul FPS
        current_time = time.time()
        if hasattr(self, '_last_detection_time'):
            fps = 1.0 / (current_time - self._last_detection_time)
            self.detection_stats['fps'] = fps
        self._last_detection_time = current_time
        
        # Mise √† jour interface
        self._update_stats_display()
    
    def _update_stats_display(self):
        """Met √† jour l'affichage des statistiques"""
        self.targets_label.setText(f"Cibles: {len(self.detected_targets)} d√©tect√©es")
        self.fps_label.setText(f"FPS: {self.detection_stats.get('fps', 0.0):.1f}")
        self.history_label.setText(f"Historique: {len(self.tracking_history)} points")
    
    # === GESTIONNAIRES D'√âV√âNEMENTS ===
    
    def _select_aruco_folder(self):
        """S√©lectionne le dossier de marqueurs ArUco"""
        folder = QFileDialog.getExistingDirectory(self, "S√©lectionner dossier ArUco")
        if folder:
            self._scan_aruco_folder(folder)
    
    def _scan_aruco_folder(self, folder_path: str):
        """Scanne le dossier ArUco s√©lectionn√©"""
        try:
            markers = self.aruco_loader.scan_aruco_folder(folder_path)
            
            # Mise √† jour interface
            self.aruco_path_label.setText(f"üìÅ {folder_path}")
            self.markers_info_label.setText(f"Marqueurs: {len(markers)} d√©tect√©s")
            
            # Activation des boutons
            self.rescan_btn.setEnabled(True)
            self.config_btn.setEnabled(True)
            
            logger.info(f"‚úÖ ArUco: {len(markers)} marqueurs d√©tect√©s")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur scan ArUco: {e}")
            QMessageBox.warning(self, "Erreur", f"Impossible de scanner le dossier:\n{e}")
    
    def _rescan_aruco_folder(self):
        """Rescanne le dossier ArUco"""
        if hasattr(self.aruco_loader, 'folder_path') and self.aruco_loader.folder_path:
            self._scan_aruco_folder(str(self.aruco_loader.folder_path))
    
    def _show_aruco_advanced_config(self):
        """Affiche la configuration avanc√©e ArUco"""
        QMessageBox.information(self, "Configuration", "Configuration avanc√©e ArUco - √Ä impl√©menter")
    
    def _toggle_detection_type(self):
        """G√®re l'activation/d√©sactivation des types de d√©tection"""
        sender = self.sender()
        
        if sender == self.aruco_check:
            self.target_detector.detection_enabled[TargetType.ARUCO] = sender.isChecked()
        elif sender == self.reflective_check:
            self.target_detector.detection_enabled[TargetType.REFLECTIVE] = sender.isChecked()
        elif sender == self.led_check:
            self.target_detector.detection_enabled[TargetType.LED] = sender.isChecked()
        
        logger.info(f"üîß Type d√©tection {sender.text()}: {'activ√©' if sender.isChecked() else 'd√©sactiv√©'}")
    
    def _start_roi_creation(self, roi_type):
        """D√©marre la cr√©ation d'une ROI"""
        self.roi_manager.start_roi_creation(roi_type)
        logger.info(f"üìê Cr√©ation ROI {roi_type.value} d√©marr√©e")
    
    def _clear_rois(self):
        """Efface toutes les ROI"""
        self.roi_manager.rois.clear()
        self.roi_info_label.setText("ROI: 0 actives")
        logger.info("üóëÔ∏è ROI effac√©es")
    
    def _on_display_click(self, event):
        """G√®re les clics sur l'affichage pour les ROI"""
        if self.roi_manager.is_creating:
            point = (event.pos().x(), event.pos().y())
            self.roi_manager.add_point(point)
            # TODO: Logique de cr√©ation ROI selon le type
    
    def _on_display_move(self, event):
        """G√®re le d√©placement souris pour les ROI"""
        if self.roi_manager.is_creating:
            # TODO: Mise √† jour preview ROI
            pass
    
    def _start_tracking(self):
        """D√©marre le tracking"""
        if not self.camera_ready:
            QMessageBox.warning(self, "Attention", 
                "Aucune cam√©ra active d√©tect√©e.\n\n"
                "1. Allez dans l'onglet Cam√©ra\n"
                "2. S√©lectionnez et ouvrez une cam√©ra\n"
                "3. D√©marrez le streaming\n"
                "4. Revenez dans cet onglet")
            return
        
        self.is_tracking = True
        self.tracking_history.clear()
        
        # Mise √† jour interface
        self._update_tracking_controls_state()
        
        # √âmission signal
        self.tracking_started.emit()
        
        logger.info("‚ñ∂Ô∏è Tracking d√©marr√©")
    
    def _stop_tracking(self):
        """Arr√™te le tracking"""
        self.is_tracking = False
        
        # Mise √† jour interface
        self._update_tracking_controls_state()
        
        # Activation export
        if self.tracking_history:
            self.export_btn.setEnabled(True)
        
        # √âmission signal
        self.tracking_stopped.emit()
        
        logger.info("‚èπÔ∏è Tracking arr√™t√©")
    
    def _update_fps_target(self, fps):
        """Met √† jour la fr√©quence de traitement"""
        if self.processing_timer.isActive():
            interval_ms = int(1000 / fps)
            self.processing_timer.start(interval_ms)
        logger.info(f"üéØ FPS cible: {fps}")
    
    def _update_zoom(self, value):
        """Met √† jour le niveau de zoom"""
        self.zoom_label.setText(f"{value}%")
        if self.current_frame is not None:
            self._update_display()
    
    def _update_tracking_controls_state(self):
        """Met √† jour l'√©tat des contr√¥les de tracking"""
        camera_ok = self.camera_ready and self.selected_camera_alias is not None
        
        if self.is_tracking:
            self.start_tracking_btn.setEnabled(False)
            self.stop_tracking_btn.setEnabled(True)
        else:
            self.start_tracking_btn.setEnabled(camera_ok)
            self.stop_tracking_btn.setEnabled(False)
    
    def _export_tracking_data(self):
        """Exporte les donn√©es de tracking"""
        if not self.tracking_history:
            QMessageBox.information(self, "Information", "Aucune donn√©e de tracking √† exporter.")
            return
        
        # Dialogue de sauvegarde
        file_path, _ = QFileDialog.getSaveFileName(
            self, 
            "Exporter donn√©es de tracking", 
            f"tracking_data_{int(time.time())}.csv",
            "CSV Files (*.csv);;JSON Files (*.json)"
        )
        
        if file_path:
            try:
                # TODO: Impl√©menter export r√©el
                QMessageBox.information(self, "Export", f"Donn√©es export√©es vers:\n{file_path}")
                logger.info(f"üíæ Donn√©es export√©es: {file_path}")
            except Exception as e:
                logger.error(f"‚ùå Erreur export: {e}")
                QMessageBox.critical(self, "Erreur Export", f"Impossible d'exporter:\n{e}")
    
    # === M√âTHODES PUBLIQUES POUR INTEGRATION ===
    
    def get_tracking_status(self) -> dict:
        """Retourne l'√©tat actuel du tracking"""
        return {
            'is_tracking': self.is_tracking,
            'camera_ready': self.camera_ready,
            'selected_camera': self.selected_camera_alias,
            'detected_targets': len(self.detected_targets),
            'tracking_points': len(self.tracking_history),
            'detection_stats': self.detection_stats
        }
    
    def set_detection_parameters(self, params: dict):
        """Configure les param√®tres de d√©tection depuis l'ext√©rieur"""
        try:
            if 'fps_target' in params:
                self.fps_spin.setValue(params['fps_target'])
            
            if 'confidence_threshold' in params:
                self.confidence_spin.setValue(params['confidence_threshold'])
            
            if 'detection_types' in params:
                types = params['detection_types']
                self.aruco_check.setChecked(types.get('aruco', True))
                self.reflective_check.setChecked(types.get('reflective', True))
                self.led_check.setChecked(types.get('led', False))
            
            logger.info("üîß Param√®tres de d√©tection mis √† jour")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur configuration param√®tres: {e}")
    
    def load_aruco_folder(self, folder_path: str):
        """Charge un dossier ArUco depuis l'ext√©rieur"""
        if Path(folder_path).exists():
            self._scan_aruco_folder(folder_path)
        else:
            logger.warning(f"‚ö†Ô∏è Dossier ArUco introuvable: {folder_path}")
    
    # === M√âTHODES DE NETTOYAGE ===
    
    def cleanup(self):
        """Nettoie les ressources avant fermeture"""
        logger.info("üßπ Nettoyage TargetTab...")
        
        # Arr√™t du tracking
        if self.is_tracking:
            self._stop_tracking()
        
        # Arr√™t des timers
        if self.processing_timer.isActive():
            self.processing_timer.stop()
        
        if self.camera_check_timer.isActive():
            self.camera_check_timer.stop()
        
        # Nettoyage des donn√©es
        self.detected_targets.clear()
        self.tracking_history.clear()
        
        logger.info("‚úÖ TargetTab nettoy√©")
    
    def closeEvent(self, event):
        """Gestionnaire de fermeture"""
        self.cleanup()
        event.accept()