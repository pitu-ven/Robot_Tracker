# robot_tracker/ui/target_tab.py
# Version: v4.4 - Correction m√©thode _update_video_display

import time
import logging
from typing import Optional

from PyQt6.QtCore import QTimer, pyqtSignal, Qt
from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, 
                            QLabel, QPushButton, QCheckBox, QSpinBox, 
                            QSlider, QMessageBox, QFileDialog)
from PyQt6.QtGui import QImage, QPixmap

from pathlib import Path

from core.aruco_config_loader import ArUcoConfigLoader
from core.target_detector import TargetDetector
from core.roi_manager import ROIManager

logger = logging.getLogger(__name__)

class TargetTab(QWidget):
    """
    Onglet Cible - Architecture Ma√Ætre-Esclave
    
    Responsabilit√©s:
    - Configuration ArUco et d√©tection
    - Gestion ROI et tracking
    - Affichage flux avec overlays
    - R√©ception signaux de CameraTab (ma√Ætre)
    
    Signaux re√ßus (CameraTab ‚Üí TargetTab):
    - camera_opened ‚Üí _on_camera_changed()
    - streaming_started ‚Üí _on_streaming_started()
    - streaming_stopped ‚Üí _on_streaming_stopped()
    
    Signaux √©mis (TargetTab ‚Üí MainWindow):
    - tracking_started
    - tracking_stopped
    - target_detected
    - status_changed
    """
    
    # Signaux
    target_detected = pyqtSignal(dict)       # Signal cible d√©tect√©e
    tracking_started = pyqtSignal()          # Signal tracking d√©marr√©
    tracking_stopped = pyqtSignal()          # Signal tracking arr√™t√©
    status_changed = pyqtSignal(dict)        # Signal changement d'√©tat
    
    def __init__(self, config_manager, camera_manager, parent=None):
        super().__init__(parent)
        
        # Configuration et managers
        self.config = config_manager
        self.camera_manager = camera_manager  # R√©f√©rence au manager centralis√©
        
        # √âtat de l'onglet
        self.is_tracking = False
        self.current_frame = None
        self.current_depth_frame = None
        self.camera_ready = False
        self.selected_camera_alias = None
        
        # Donn√©es de tracking
        self.detected_targets = []
        self.tracking_history = []
        self.detection_stats = {
            'total_detections': 0,
            'fps': 0.0,
            'last_detection_time': 0.0
        }
        
        # ORDRE CORRECT :
        # 1. D'ABORD : Composants de d√©tection
        self._init_detection_components()
        
        # 2. ENSUITE : Interface utilisateur
        self._setup_ui()
        self._connect_internal_signals()
        
        # 3. ENFIN : Auto-chargement ArUco (apr√®s que tout soit cr√©√©)
        self._auto_load_latest_aruco_folder()
        
        # Timer pour le traitement des frames
        self.processing_timer = QTimer()
        self.processing_timer.timeout.connect(self._process_current_frame)
        
        # Timer pour v√©rifier l'√©tat des cam√©ras
        self.camera_check_timer = QTimer()
        self.camera_check_timer.timeout.connect(self._check_camera_status)
        self.camera_check_timer.start(1000)  # V√©rification chaque seconde
        
        version = self._safe_get_config('ui', 'target_tab.version', '4.4')
        logger.info(f"üéØ TargetTab v{version} initialis√© avec corrections signaux")
        
        # V√©rification initiale de l'√©tat des cam√©ras
        self._check_camera_status()
    
    def _init_detection_components(self):
        """Initialise les composants de d√©tection"""
        try:
            self.aruco_loader = ArUcoConfigLoader(self.config)
            self.target_detector = TargetDetector(self.config)
            self.roi_manager = ROIManager(self.config)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Composants d√©tection non disponibles: {e}")
            # Fallback avec stubs
            self.aruco_loader = ArUcoConfigLoader(self.config)
            self.target_detector = TargetDetector(self.config)
            self.roi_manager = ROIManager(self.config)
    
    def _auto_load_latest_aruco_folder(self):
        """Charge automatiquement le dernier dossier ArUco - CORRECTION COMPL√àTE"""
        try:
            # CORRECTION: V√©rification que l'UI est initialis√©e
            if not hasattr(self, 'aruco_status_label') or not hasattr(self, 'markers_count_label'):
                logger.debug("‚ö†Ô∏è UI ArUco pas encore cr√©√©e, auto-chargement report√©")
                # Programmer un retry
                QTimer.singleShot(500, self._auto_load_latest_aruco_folder)
                return
                
            # CORRECTION: V√©rification m√©thode disponible
            if not hasattr(self.aruco_loader, 'get_latest_aruco_folder'):
                logger.warning("‚ö†Ô∏è M√©thode get_latest_aruco_folder non disponible")
                self.aruco_status_label.setText("‚ö†Ô∏è Auto-chargement non disponible")
                self.aruco_status_label.setStyleSheet("QLabel { color: orange; }")
                return
                
            # Recherche du dernier dossier
            latest_folder = self.aruco_loader.get_latest_aruco_folder()
            
            if latest_folder:
                logger.info(f"üéØ Auto-chargement ArUco: {latest_folder}")
                self._scan_aruco_folder(latest_folder)
            else:
                logger.info("‚ÑπÔ∏è Aucun dossier ArUco trouv√© pour auto-chargement")
                
                # Interface mise √† jour m√™me sans dossier
                self.aruco_status_label.setText("‚ö†Ô∏è Aucun dossier ArUco trouv√©")
                self.aruco_status_label.setStyleSheet("QLabel { color: orange; }")
                self.markers_count_label.setText("Marqueurs: 0 d√©tect√©s")
                self.markers_count_label.setStyleSheet("QLabel { color: orange; }")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur auto-chargement ArUco: {e}")
            
            try:
                self.aruco_status_label.setText("‚ùå Erreur auto-chargement")
                self.aruco_status_label.setStyleSheet("QLabel { color: red; }")
            except:
                pass
    
    def _safe_get_config(self, section: str, key: str, default=None):
        """Acc√®s s√©curis√© √† la configuration"""
        try:
            return self.config.get(section, key, default) if hasattr(self.config, 'get') else default
        except Exception:
            return default
    
    def _setup_ui(self):
        """Configure l'interface utilisateur simplifi√©e"""
        main_layout = QHBoxLayout(self)
        
        # Panneau de contr√¥le (gauche) - Focus d√©tection
        control_panel = self._create_control_panel()
        control_width = self._safe_get_config('ui', 'target_tab.layout.control_panel_width', 320)
        control_panel.setMaximumWidth(control_width)
        
        # Zone d'affichage (droite) - Flux cam√©ra + overlays
        display_area = self._create_display_area()
        
        main_layout.addWidget(control_panel)
        main_layout.addWidget(display_area, 1)
    
    def _create_control_panel(self):
        """Cr√©e le panneau de contr√¥le focalis√© sur la d√©tection"""
        panel = QWidget()
        layout = QVBoxLayout(panel)
        
        # 1. √âtat de la cam√©ra (d√©tection automatique)
        camera_status_group = self._create_camera_status_group()
        layout.addWidget(camera_status_group)
        
        # 2. Configuration ArUco
        aruco_group = self._create_aruco_config_group()
        layout.addWidget(aruco_group)
        
        # 3. Types de d√©tection
        detection_types_group = self._create_detection_types_group()
        layout.addWidget(detection_types_group)
        
        # 4. Outils ROI
        roi_tools_group = self._create_roi_tools_group()
        layout.addWidget(roi_tools_group)
        
        # 5. Contr√¥les tracking
        tracking_controls_group = self._create_tracking_controls_group()
        layout.addWidget(tracking_controls_group)
        
        # 6. Statistiques
        stats_group = self._create_statistics_group()
        layout.addWidget(stats_group)
        
        layout.addStretch()  # Push vers le haut
        
        return panel
    
    def _create_camera_status_group(self):
        """Groupe d'√©tat de la cam√©ra (lecture seule)"""
        group = QGroupBox("üì∑ √âtat Cam√©ra")
        layout = QVBoxLayout(group)
        
        self.camera_status_label = QLabel("‚ùå Aucune cam√©ra active")
        self.camera_status_label.setStyleSheet("QLabel { color: red; font-weight: bold; }")
        
        self.camera_alias_label = QLabel("Alias: N/A")
        self.camera_alias_label.setStyleSheet("QLabel { color: gray; }")
        
        info_label = QLabel("‚ÑπÔ∏è G√©r√© par l'onglet Cam√©ra")
        info_label.setStyleSheet("QLabel { color: blue; font-style: italic; }")
        
        layout.addWidget(self.camera_status_label)
        layout.addWidget(self.camera_alias_label)
        layout.addWidget(info_label)
        
        return group
    
    def _create_aruco_config_group(self):
        """Groupe de configuration ArUco"""
        group = QGroupBox("üéØ Configuration ArUco")
        layout = QVBoxLayout(group)
        
        # S√©lection dossier
        folder_layout = QHBoxLayout()
        self.select_folder_btn = QPushButton("üìÅ S√©lectionner Dossier")
        self.select_folder_btn.clicked.connect(self._select_aruco_folder)
        self.rescan_btn = QPushButton("üîÑ")
        self.rescan_btn.setMaximumWidth(30)
        self.rescan_btn.clicked.connect(self._rescan_current_folder)
        
        folder_layout.addWidget(self.select_folder_btn)
        folder_layout.addWidget(self.rescan_btn)
        
        # Status
        self.aruco_status_label = QLabel("Dossier: Non s√©lectionn√©")
        self.markers_count_label = QLabel("Marqueurs: 0 d√©tect√©s")
        
        layout.addLayout(folder_layout)
        layout.addWidget(self.aruco_status_label)
        layout.addWidget(self.markers_count_label)
        
        return group
    
    def _create_detection_types_group(self):
        """Groupe des types de d√©tection"""
        group = QGroupBox("üîç Types de D√©tection")
        layout = QVBoxLayout(group)
        
        self.aruco_check = QCheckBox("ArUco Markers")
        self.aruco_check.setChecked(True)
        self.aruco_check.toggled.connect(self._on_detection_type_changed)
        
        self.reflective_check = QCheckBox("Marqueurs R√©fl√©chissants")
        self.reflective_check.setChecked(False)
        self.reflective_check.toggled.connect(self._on_detection_type_changed)
        
        self.led_check = QCheckBox("LEDs Color√©es")
        self.led_check.setChecked(False)
        self.led_check.toggled.connect(self._on_detection_type_changed)
        
        layout.addWidget(self.aruco_check)
        layout.addWidget(self.reflective_check)
        layout.addWidget(self.led_check)
        
        return group
    
    def _create_roi_tools_group(self):
        """Groupe des outils ROI"""
        group = QGroupBox("üìê Outils ROI")
        layout = QVBoxLayout(group)
        
        roi_buttons_layout = QHBoxLayout()
        
        self.roi_rect_btn = QPushButton("‚¨ú")
        self.roi_rect_btn.setToolTip("Rectangle")
        self.roi_polygon_btn = QPushButton("‚¨ü")
        self.roi_polygon_btn.setToolTip("Polygone")
        self.clear_roi_btn = QPushButton("üóëÔ∏è")
        self.clear_roi_btn.setToolTip("Effacer ROI")
        
        roi_buttons_layout.addWidget(self.roi_rect_btn)
        roi_buttons_layout.addWidget(self.roi_polygon_btn)
        roi_buttons_layout.addWidget(self.clear_roi_btn)
        
        self.roi_status_label = QLabel("ROI: Aucune")
        
        layout.addLayout(roi_buttons_layout)
        layout.addWidget(self.roi_status_label)
        
        return group
    
    def _create_tracking_controls_group(self):
        """Groupe des contr√¥les de tracking"""
        group = QGroupBox("üé¨ Contr√¥les Tracking")
        layout = QVBoxLayout(group)
        
        # Boutons start/stop
        buttons_layout = QHBoxLayout()
        self.start_tracking_btn = QPushButton("‚ñ∂Ô∏è D√©marrer")
        self.start_tracking_btn.clicked.connect(self._start_tracking)
        self.start_tracking_btn.setEnabled(False)
        
        self.stop_tracking_btn = QPushButton("‚èπÔ∏è Arr√™ter")
        self.stop_tracking_btn.clicked.connect(self._stop_tracking)
        self.stop_tracking_btn.setEnabled(False)
        
        buttons_layout.addWidget(self.start_tracking_btn)
        buttons_layout.addWidget(self.stop_tracking_btn)
        
        # Param√®tres
        fps_layout = QHBoxLayout()
        fps_layout.addWidget(QLabel("FPS Cible:"))
        self.fps_spin = QSpinBox()
        self.fps_spin.setRange(1, 60)
        self.fps_spin.setValue(30)
        fps_layout.addWidget(self.fps_spin)
        fps_layout.addWidget(QLabel("fps"))
        
        confidence_layout = QHBoxLayout()
        confidence_layout.addWidget(QLabel("Confiance:"))
        self.confidence_spin = QSpinBox()
        self.confidence_spin.setRange(1, 100)
        self.confidence_spin.setValue(80)
        self.confidence_spin.setSuffix("%")
        confidence_layout.addWidget(self.confidence_spin)
        
        # Zoom
        zoom_layout = QHBoxLayout()
        zoom_layout.addWidget(QLabel("Zoom:"))
        self.zoom_slider = QSlider(Qt.Orientation.Horizontal)
        self.zoom_slider.setRange(50, 200)
        self.zoom_slider.setValue(100)
        zoom_layout.addWidget(self.zoom_slider)
        zoom_layout.addWidget(QLabel("100%"))
        
        layout.addLayout(buttons_layout)
        layout.addLayout(fps_layout)
        layout.addLayout(confidence_layout)
        layout.addLayout(zoom_layout)
        
        return group
    
    def _create_statistics_group(self):
        """Groupe des statistiques"""
        group = QGroupBox("üìä Statistiques")
        layout = QVBoxLayout(group)
        
        self.detections_count_label = QLabel("D√©tections: 0")
        self.fps_label = QLabel("FPS: 0.0")
        self.processing_time_label = QLabel("Temps: 0ms")
        
        layout.addWidget(self.detections_count_label)
        layout.addWidget(self.fps_label)
        layout.addWidget(self.processing_time_label)
        
        return group
    
    def _create_display_area(self):
        """Zone d'affichage vid√©o avec overlays"""
        self.camera_display = QLabel("En attente du flux cam√©ra...")
        self.camera_display.setStyleSheet("QLabel { border: 1px solid gray; background: black; color: white; }")
        self.camera_display.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.camera_display.setMinimumSize(640, 480)
        
        return self.camera_display
    
    # === M√âTHODES DE CONNEXION SIGNAUX ===
    
    def _connect_internal_signals(self):
        """Connecte les signaux internes de l'onglet"""
        # Connexions d√©j√† √©tablies dans _create_*_group()
        pass
    
    # === SLOTS POUR SIGNAUX EXTERNES (CameraTab ‚Üí TargetTab) ===
    
    def _on_camera_changed(self, camera_alias: str):
        """Slot appel√© quand une cam√©ra est s√©lectionn√©e/ouverte"""
        logger.info(f"üé• Signal cam√©ra chang√©e re√ßu: {camera_alias}")
        
        # Validation cam√©ra disponible
        if not self.camera_manager.is_camera_open(camera_alias):
            logger.warning(f"‚ö†Ô∏è Cam√©ra {camera_alias} non disponible")
            self.camera_ready = False
            self.selected_camera_alias = None
            self._update_camera_status()
            return
        
        # Mise √† jour √©tat
        self.selected_camera_alias = camera_alias
        self.camera_ready = True
        self._update_camera_status()
    
    def _update_camera_status(self):
        """Met √† jour l'affichage du statut cam√©ra"""
        if self.camera_ready and self.selected_camera_alias:
            self.camera_status_label.setText(f"‚úÖ Cam√©ra: {self.selected_camera_alias}")
            self.camera_status_label.setStyleSheet("QLabel { color: green; font-weight: bold; }")
            self.camera_alias_label.setText(f"Alias: {self.selected_camera_alias}")
            self.camera_alias_label.setStyleSheet("QLabel { color: black; }")
            
            # Activation des boutons
            self.start_tracking_btn.setEnabled(not self.is_tracking)
        else:
            self.camera_status_label.setText("‚ùå Aucune cam√©ra active")
            self.camera_status_label.setStyleSheet("QLabel { color: red; font-weight: bold; }")
            self.camera_alias_label.setText("Alias: N/A")
            self.camera_alias_label.setStyleSheet("QLabel { color: gray; }")
            
            # D√©sactivation des boutons
            self.start_tracking_btn.setEnabled(False)
            if self.is_tracking:
                self._stop_tracking()
    
    def _on_streaming_started(self):
        """Slot appel√© quand le streaming d√©marre"""
        logger.info("üé¨ Signal streaming d√©marr√© re√ßu")
        
        # D√©marrer le traitement des frames si cam√©ra pr√™te
        if self.camera_ready and self.selected_camera_alias:
            fps_target = self.fps_spin.value()
            interval_ms = int(1000 / fps_target)
            self.processing_timer.start(interval_ms)
            logger.info(f"üé¨ Traitement frames d√©marr√© √† {fps_target}fps")
    
    def _on_streaming_stopped(self):
        """Slot appel√© quand le streaming s'arr√™te"""
        logger.info("‚èπÔ∏è Signal streaming arr√™t√© re√ßu")
        
        # Arr√™t du processing
        self.processing_timer.stop()
        if self.is_tracking:
            self._stop_tracking()
        
        # Reset affichage
        self.camera_display.setText("En attente du flux cam√©ra...")
        
        # Force une v√©rification de l'√©tat
        self._check_camera_status()
    
    # === M√âTHODES DE TRAITEMENT ===
    
    def _process_current_frame(self):
        """M√âTHODE CORRIG√âE - Traite la frame courante avec optimisations performance"""
        if not self.camera_ready or not self.selected_camera_alias:
            return
        
        start_time = time.time()
        
        try:
            # R√©cup√©ration frame avec timeout
            success, frame, depth_frame = self.camera_manager.get_camera_frame(self.selected_camera_alias)
            
            if success and frame is not None:
                self.current_frame = frame.copy()
                self.current_depth_frame = depth_frame
                
                # Traitement de d√©tection SEULEMENT si tracking actif
                if self.is_tracking:
                    # Skip detection si frame pr√©c√©dente pas encore trait√©e
                    if not hasattr(self, '_processing_detection') or not self._processing_detection:
                        self._detect_targets_in_frame()
                
                # CORRECTION: Appel correct de la m√©thode d'affichage
                self._update_display()  # Au lieu de self._update_video_display()
                
                # Mesure performance r√©elle
                processing_time = (time.time() - start_time) * 1000  # ms
                if processing_time > 33:  # Plus de 33ms
                    logger.debug(f"‚ö†Ô∏è Frame lente: {processing_time:.1f}ms")
                    
            else:
                if not self.camera_manager.is_camera_open(self.selected_camera_alias):
                    logger.warning(f"‚ö†Ô∏è Cam√©ra {self.selected_camera_alias} non disponible")
                    self._check_camera_status()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement frame: {e}")
            self._check_camera_status()
    
    def _detect_targets_in_frame(self):
        """Effectue la d√©tection des cibles dans la frame courante"""
        if self.current_frame is None:
            return
        
        # Protection contre traitement concurrent
        if hasattr(self, '_processing_detection') and self._processing_detection:
            return
        
        self._processing_detection = True

        try:
            # Utilisation de detect_all_targets
            detected_results = self.target_detector.detect_all_targets(self.current_frame)
            
            # Conversion des r√©sultats pour compatibilit√©
            self.detected_targets = detected_results
            
            # Cr√©ation des infos de d√©tection
            detection_info = {
                'frame_size': self.current_frame.shape[:2],
                'detection_count': len(detected_results),
                'detection_time': time.time(),
                'target_types': [result.target_type.value for result in detected_results] if detected_results else []
            }
            
            # Mise √† jour des statistiques
            self._update_detection_stats(detection_info)
            
            # √âmission du signal pour autres onglets
            if detected_results:
                self.target_detected.emit({
                    'targets': detected_results,
                    'frame_info': detection_info,
                    'timestamp': time.time()
                })
        
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©tection: {e}")
        finally:
            self._processing_detection = False
    
    def _update_display(self):
        """M√âTHODE CORRIG√âE - Met √† jour l'affichage avec la frame et les overlays"""
        if self.current_frame is None:
            return
        
        try:
            display_frame = self.current_frame.copy()
            
            # Ajout des overlays
            self._draw_overlays(display_frame)
            
            # Conversion pour affichage Qt
            height, width, channel = display_frame.shape
            bytes_per_line = 3 * width
            q_image = QImage(display_frame.data, width, height, bytes_per_line, QImage.Format.Format_RGB888).rgbSwapped()
            
            # Application du zoom
            zoom_factor = self.zoom_slider.value() / 100.0
            if zoom_factor != 1.0:
                q_image = q_image.scaled(int(width * zoom_factor), int(height * zoom_factor), 
                                       Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation)
            
            pixmap = QPixmap.fromImage(q_image)
            self.camera_display.setPixmap(pixmap)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur affichage: {e}")
    
    def _draw_overlays(self, frame):
        """Dessine les overlays sur la frame"""
        if not hasattr(self, 'detected_targets'):
            return
        
        # ROI actives
        for roi in self.roi_manager.rois:
            color = (0, 255, 255)  # Jaune
            thickness = 2
            # Dessiner selon le type de ROI (rectangle, polygone, etc.)
            # Code de dessin ROI √† impl√©menter
        
        # D√©tections ArUco
        if hasattr(self, 'detected_targets') and self.detected_targets:
            for target in self.detected_targets:
                # Code de dessin des d√©tections √† impl√©menter
                pass
    
    # === M√âTHODES D'INTERFACE ===
    
    def _select_aruco_folder(self):
        """S√©lectionne un dossier ArUco"""
        folder = QFileDialog.getExistingDirectory(self, "S√©lectionner dossier ArUco")
        if folder:
            self._scan_aruco_folder(folder)
    
    def _scan_aruco_folder(self, folder_path):
        """Scanne un dossier ArUco - CORRECTION COMPL√àTE"""
        try:
            logger.info(f"üîç Scan dossier ArUco: {folder_path}")
            
            # CORRECTION 1: Utilisation de scan_aruco_folder (nom correct)
            detected_markers = self.aruco_loader.scan_aruco_folder(folder_path)
            markers_count = len(detected_markers) if detected_markers else 0
            
            logger.info(f"üìä Marqueurs d√©tect√©s: {markers_count}")
            
            # CORRECTION 2: Mise √† jour de l'interface avec gestion d'erreurs
            try:
                folder_name = Path(folder_path).name
                self.aruco_status_label.setText(f"üìÅ {folder_name}")
                self.markers_count_label.setText(f"Marqueurs: {markers_count} d√©tect√©s")
                
                if markers_count > 0:
                    self.aruco_status_label.setStyleSheet("QLabel { color: green; font-weight: bold; }")
                    self.markers_count_label.setStyleSheet("QLabel { color: green; }")
                    
                    # CORRECTION 3: D√©tection du dictionnaire si disponible
                    try:
                        if hasattr(self.aruco_loader, '_detect_common_dictionary'):
                            dict_name = self.aruco_loader._detect_common_dictionary()
                            logger.info(f"üéØ Dictionnaire d√©tect√©: {dict_name}")
                            
                            # CORRECTION 4: Mise √† jour du d√©tecteur avec m√©thodes disponibles
                            if hasattr(self.target_detector, 'update_aruco_dictionary'):
                                self.target_detector.update_aruco_dictionary(dict_name)
                                logger.info(f"‚úÖ D√©tecteur mis √† jour: {dict_name}")
                            elif hasattr(self.target_detector, 'set_aruco_dictionary'):
                                self.target_detector.set_aruco_dictionary(dict_name)
                                logger.info(f"‚úÖ Dictionnaire configur√©: {dict_name}")
                            else:
                                logger.warning(f"‚ö†Ô∏è Impossible de configurer le dictionnaire: {dict_name}")
                                
                    except Exception as dict_error:
                        logger.warning(f"‚ö†Ô∏è Erreur d√©tection dictionnaire: {dict_error}")
                        
                else:
                    self.aruco_status_label.setStyleSheet("QLabel { color: orange; }")
                    self.markers_count_label.setStyleSheet("QLabel { color: orange; }")
                    logger.warning(f"‚ö†Ô∏è Aucun marqueur trouv√© dans {folder_path}")
                    
            except Exception as ui_error:
                logger.error(f"‚ùå Erreur mise √† jour interface: {ui_error}")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur scan ArUco: {e}")
            
            # Mise √† jour interface en cas d'erreur
            try:
                self.aruco_status_label.setText("‚ùå Erreur scan")
                self.aruco_status_label.setStyleSheet("QLabel { color: red; }")
                self.markers_count_label.setText("Marqueurs: Erreur")
                self.markers_count_label.setStyleSheet("QLabel { color: red; }")
            except:
                pass  # Ignore les erreurs d'interface si l'UI n'est pas initialis√©e
                
            # Message utilisateur
            QMessageBox.warning(self, "Erreur Scan ArUco", 
                              f"Erreur lors du scan du dossier ArUco:\n\n{str(e)}\n\n"
                              f"V√©rifiez que le dossier contient des fichiers de marqueurs ArUco.")
    
    def _rescan_current_folder(self):
        """Rescanne le dossier ArUco actuel - CORRECTION"""
        try:
            # CORRECTION: V√©rification robuste du dossier actuel
            current_folder = None
            
            if hasattr(self.aruco_loader, 'folder_path') and self.aruco_loader.folder_path:
                current_folder = str(self.aruco_loader.folder_path)
            elif hasattr(self.aruco_loader, 'current_folder') and self.aruco_loader.current_folder:
                current_folder = self.aruco_loader.current_folder
                
            if current_folder:
                logger.info(f"üîÑ Rescan ArUco: {current_folder}")
                self._scan_aruco_folder(current_folder)
            else:
                logger.warning("‚ö†Ô∏è Aucun dossier ArUco √† rescanner")
                QMessageBox.information(self, "Rescan", 
                                      "Aucun dossier ArUco s√©lectionn√©.\n"
                                      "Veuillez d'abord s√©lectionner un dossier avec le bouton 'üìÅ'.")
                                      
        except Exception as e:
            logger.error(f"‚ùå Erreur rescan ArUco: {e}")
            QMessageBox.warning(self, "Erreur", f"Erreur lors du rescan:\n{e}")
    
    def _on_detection_type_changed(self):
        """Callback changement types de d√©tection"""
        if hasattr(self, 'target_detector'):
            try:
                if hasattr(self.target_detector, 'set_detection_enabled'):
                    from core.target_detector import TargetType
                    self.target_detector.set_detection_enabled(TargetType.ARUCO, self.aruco_check.isChecked())
                    self.target_detector.set_detection_enabled(TargetType.REFLECTIVE, self.reflective_check.isChecked())
                    self.target_detector.set_detection_enabled(TargetType.LED, self.led_check.isChecked())
                
                logger.info(f"üîç Types d√©tection: ArUco={self.aruco_check.isChecked()}, "
                          f"R√©fl√©chissant={self.reflective_check.isChecked()}, "
                          f"LED={self.led_check.isChecked()}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur mise √† jour d√©tection: {e}")
    
    def _start_tracking(self):
        """D√©marre le tracking"""
        if not self.camera_ready:
            QMessageBox.warning(self, "Erreur", "Aucune cam√©ra active")
            return
        
        self.is_tracking = True
        self.start_tracking_btn.setEnabled(False)
        self.stop_tracking_btn.setEnabled(True)
        
        # √âmission du signal
        self.tracking_started.emit()
        
        logger.info("üéØ Tracking d√©marr√©")
    
    def _stop_tracking(self):
        """Arr√™te le tracking"""
        self.is_tracking = False
        self.start_tracking_btn.setEnabled(self.camera_ready)
        self.stop_tracking_btn.setEnabled(False)
        
        # √âmission du signal
        self.tracking_stopped.emit()
        
        logger.info("üõë Tracking arr√™t√©")
    
    def _update_detection_stats(self, detection_info):
        """Met √† jour les statistiques de d√©tection"""
        try:
            self.detection_stats['total_detections'] += detection_info.get('detection_count', 0)
            
            # Calcul FPS
            current_time = time.time()
            if self.detection_stats['last_detection_time'] > 0:
                time_diff = current_time - self.detection_stats['last_detection_time']
                if time_diff > 0:
                    self.detection_stats['fps'] = 1.0 / time_diff
            
            self.detection_stats['last_detection_time'] = current_time
            
            # Mise √† jour de l'affichage
            self.detections_count_label.setText(f"D√©tections: {self.detection_stats['total_detections']}")
            self.fps_label.setText(f"FPS: {self.detection_stats['fps']:.1f}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour stats: {e}")
    
    def _check_camera_status(self):
        """V√©rifie p√©riodiquement l'√©tat de la cam√©ra"""
        try:
            if self.selected_camera_alias:
                # V√©rification si cam√©ra toujours active
                if self.camera_manager and hasattr(self.camera_manager, 'is_camera_open'):
                    if self.camera_manager.is_camera_open(self.selected_camera_alias):
                        # Cam√©ra OK
                        if hasattr(self.camera_manager, '_is_streaming') and self.camera_manager._is_streaming:
                            status_text = f"√âtat: ‚úÖ {self.selected_camera_alias} streaming"
                            color = "green"
                        else:
                            status_text = f"√âtat: ‚úÖ {self.selected_camera_alias} pr√™te"
                            color = "green"
                    else:
                        # Cam√©ra ferm√©e
                        status_text = "√âtat: ‚ùå Cam√©ra ferm√©e"
                        color = "red"
                        self.camera_ready = False
                else:
                    status_text = "√âtat: ‚ö†Ô∏è Manager non disponible"
                    color = "orange"
                    self.camera_ready = False
            else:
                # Aucune cam√©ra s√©lectionn√©e
                status_text = "√âtat: Aucune cam√©ra"
                color = "orange"
                self.camera_ready = False
            
            # Mise √† jour interface
            if hasattr(self, 'camera_status_label'):
                self.camera_status_label.setText(status_text)
                self.camera_status_label.setStyleSheet(f"QLabel {{ color: {color}; }}")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification statut cam√©ra: {e}")

    # === M√âTHODES UTILITAIRES ===
    
    def get_current_detection_results(self):
        """Retourne les r√©sultats de d√©tection actuels"""
        return getattr(self, 'detected_targets', [])
    
    def get_tracking_statistics(self):
        """Retourne les statistiques de tracking"""
        return self.detection_stats.copy()
    
    def is_camera_ready(self):
        """V√©rifie si une cam√©ra est pr√™te"""
        return self.camera_ready and self.selected_camera_alias is not None
    
    def force_camera_refresh(self):
        """Force une actualisation de l'√©tat cam√©ra"""
        self._check_camera_status()
    
    # === M√âTHODES DE DEBUGGING ===
    
    def _debug_aruco_info(self):
        """Affiche les informations de d√©bogage ArUco"""
        debug_info = []
        debug_info.append(f"Dossier ArUco: {getattr(self.aruco_loader, 'current_folder', 'Non d√©fini')}")
        debug_info.append(f"Marqueurs charg√©s: {len(getattr(self.aruco_loader, 'markers', []))}")
        
        if hasattr(self.target_detector, 'aruco_detector'):
            debug_info.append(f"D√©tecteur initialis√©: Oui")
        else:
            debug_info.append(f"D√©tecteur initialis√©: Non")
        
        debug_info.append(f"Types d√©tection actifs:")
        debug_info.append(f"  - ArUco: {self.aruco_check.isChecked()}")
        debug_info.append(f"  - R√©fl√©chissants: {self.reflective_check.isChecked()}")
        debug_info.append(f"  - LEDs: {self.led_check.isChecked()}")
        
        debug_info.append(f"ROI activ√©e: {getattr(self, 'roi_detection_enabled', False)}")
        debug_info.append(f"D√©tections totales: {self.detection_stats['total_detections']}")
        debug_info.append(f"FPS: {self.detection_stats['fps']:.1f}\n")
        
        # Validation
        if hasattr(self.aruco_loader, 'validate_markers'):
            valid_count, issues = self.aruco_loader.validate_markers()
            debug_info.append(f"Marqueurs valides: {valid_count}")
            if issues:
                debug_info.append("Probl√®mes d√©tect√©s:")
                for issue in issues[:10]:
                    debug_info.append(f"  - {issue}")
                if len(issues) > 10:
                    debug_info.append(f"  ... et {len(issues) - 10} autres probl√®mes")
        
        # Affichage dans une fen√™tre de dialogue
        msg = QMessageBox(self)
        msg.setWindowTitle("Debug ArUco")
        msg.setText("Informations de d√©bogage ArUco:")
        msg.setDetailedText('\n'.join(debug_info))
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()
    
    # === M√âTHODES DE CLEANUP ===
    
    def closeEvent(self, event):
        """Nettoyage √† la fermeture"""
        try:
            if hasattr(self, 'processing_timer'):
                self.processing_timer.stop()
            if hasattr(self, 'camera_check_timer'):
                self.camera_check_timer.stop()
            if self.is_tracking:
                self._stop_tracking()
                
            logger.info("üõë TargetTab ferm√© proprement")
        except Exception as e:
            logger.error(f"‚ùå Erreur fermeture TargetTab: {e}")
        finally:
            event.accept()
    
    def __del__(self):
        """Destructeur - nettoyage final"""
        try:
            if hasattr(self, 'processing_timer') and self.processing_timer.isActive():
                self.processing_timer.stop()
            if hasattr(self, 'camera_check_timer') and self.camera_check_timer.isActive():
                self.camera_check_timer.stop()
        except:
            pass  # Ignore les erreurs √† la destruction