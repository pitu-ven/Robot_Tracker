# ui/main_window.py
# Version 1.3 - Correction int√©gration TargetTab avec camera_manager partag√©
# Modification: Ajout camera_manager centralis√© pour partage entre onglets

from PyQt6.QtWidgets import (QMainWindow, QTabWidget, QWidget, QVBoxLayout, 
                           QStatusBar, QMenuBar, QToolBar, QMessageBox, QApplication, QDialog)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QIcon, QFont, QAction, QPalette, QColor
import sys
import logging

from .camera_tab import CameraTab
from .trajectory_tab import TrajectoryTab
from .target_tab import TargetTab
from .calibration_tab import CalibrationTab
from .measures_tab import MeasuresTab
from .aruco_generator import ArUcoGeneratorDialog
from core.camera_manager import CameraManager  # Import ajout√©

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MainWindow(QMainWindow):
    """Fen√™tre principale avec camera_manager centralis√©"""
    
    def __init__(self, config):
        super().__init__()
        
        # Configuration
        self.config = config
        self.tabs = {}
        
        # Camera manager centralis√© pour partage entre onglets
        self.camera_manager = CameraManager(self.config)
        logger.info("üé• CameraManager centralis√© cr√©√©")
        
        # Interface
        self.init_ui()
        self.apply_theme()
        self.center_window()
        self.connect_signals()
        
        # Timer pour mise √† jour p√©riodique
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_status)
        self.update_timer.start(1000)
        
        logger.info("‚úÖ MainWindow initialis√© avec succ√®s")
    
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        # Configuration fen√™tre
        window_config = self.config.get('ui', 'window', {})
        
        title = window_config.get('title', 'Robot Trajectory Controller v1.0')
        width = window_config.get('width', 1920)
        height = window_config.get('height', 1057)
        
        self.setWindowTitle(title)
        self.resize(width, height)
        
        logger.info(f"üìê Fen√™tre configur√©e: {width}x{height}, titre: '{title}'")
        
        # Widget central avec onglets
        self.central_widget = QTabWidget()
        self.setCentralWidget(self.central_widget)
        
        # Interface
        self.create_menu_bar()
        self.create_toolbar()
        self.create_tabs()
        self.create_status_bar()
    
    def create_tabs(self):
        """Cr√©e les onglets de l'application avec camera_manager partag√©"""
        tab_configs = self.config.get('ui', 'tabs', {})
        tab_names = tab_configs.get('tab_names', ["Cam√©ra", "Trajectoire", "Cible", "Calibration", "Mesures"])
        
        try:
            # Onglet 1: Cam√©ra (utilise le camera_manager centralis√©)
            self.tabs['camera'] = CameraTab(self.config, camera_manager=self.camera_manager)
            self.central_widget.addTab(self.tabs['camera'], tab_names[0])
            logger.info(f"üìë Onglet '{tab_names[0]}' cr√©√© avec succ√®s")
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation onglet Cam√©ra: {e}")
            # Cr√©ation onglet d'erreur minimal
            error_widget = QWidget()
            error_layout = QVBoxLayout(error_widget)
            error_layout.addWidget(QLabel(f"Erreur onglet Cam√©ra: {e}"))
            self.central_widget.addTab(error_widget, "‚ö†Ô∏è Cam√©ra")
        
        try:
            # Onglet 2: Trajectoire
            self.tabs['trajectory'] = TrajectoryTab(self.config)
            self.central_widget.addTab(self.tabs['trajectory'], tab_names[1])
            logger.info(f"üìë Onglet '{tab_names[1]}' cr√©√© avec succ√®s")
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation onglet Trajectoire: {e}")
            error_widget = QWidget()
            self.central_widget.addTab(error_widget, "‚ö†Ô∏è Trajectoire")
        
        try:
            # Onglet 3: Cible (CORRECTION: ajout camera_manager)
            self.tabs['target'] = TargetTab(self.config, self.camera_manager)
            self.central_widget.addTab(self.tabs['target'], tab_names[2])
            logger.info(f"üìë Onglet '{tab_names[2]}' cr√©√© avec succ√®s")
            
            # Connexion des signaux entre onglets
            if 'camera' in self.tabs and hasattr(self.tabs['camera'], 'camera_selected'):
                self.tabs['camera'].camera_selected.connect(self.tabs['target'].on_camera_ready)
                logger.info("üîó Signaux cam√©ra ‚Üí cible connect√©s")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation onglet Cible: {e}")
            # Widget d'erreur avec informations
            error_widget = QWidget()
            error_layout = QVBoxLayout(error_widget)
            error_layout.addWidget(QLabel(f"Erreur onglet Cible: {e}"))
            error_layout.addWidget(QLabel("V√©rifiez les d√©pendances OpenCV et les fichiers de configuration"))
            self.central_widget.addTab(error_widget, "‚ö†Ô∏è Cible")
        
        try:
            # Onglet 4: Calibration
            self.tabs['calibration'] = CalibrationTab(self.config)
            self.central_widget.addTab(self.tabs['calibration'], tab_names[3])
            logger.info(f"üìë Onglet '{tab_names[3]}' cr√©√© avec succ√®s")
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation onglet Calibration: {e}")
            error_widget = QWidget()
            self.central_widget.addTab(error_widget, "‚ö†Ô∏è Calibration")
        
        try:
            # Onglet 5: Mesures
            self.tabs['measures'] = MeasuresTab(self.config)
            self.central_widget.addTab(self.tabs['measures'], tab_names[4])
            logger.info(f"üìë Onglet '{tab_names[4]}' cr√©√© avec succ√®s")
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation onglet Mesures: {e}")
            error_widget = QWidget()
            self.central_widget.addTab(error_widget, "‚ö†Ô∏è Mesures")
        
        logger.info(f"üìë {len(self.tabs)} onglet(s) cr√©√©(s) avec succ√®s")
        
        # Onglet par d√©faut
        default_tab = tab_configs.get('default_tab', 0)
        if 0 <= default_tab < self.central_widget.count():
            self.central_widget.setCurrentIndex(default_tab)
    
    def create_menu_bar(self):
        """Cr√©ation de la barre de menu avec g√©n√©rateur ArUco"""
        layout_config = self.config.get('ui', 'layout', {})
        if not layout_config.get('menu_bar', True):
            return
        
        menubar = self.menuBar()
        
        # Menu Fichier
        file_menu = menubar.addMenu('&Fichier')
        
        open_action = QAction('&Ouvrir Trajectoire...', self)
        open_action.setShortcut('Ctrl+O')
        open_action.setStatusTip('Charger un fichier de trajectoire')
        open_action.triggered.connect(self.open_trajectory_file)
        file_menu.addAction(open_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction('&Quitter', self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.setStatusTip('Quitter l\'application')
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # Menu Outils avec g√©n√©rateur ArUco
        tools_menu = menubar.addMenu('&Outils')
        
        aruco_action = QAction('&G√©n√©rateur ArUco...', self)
        aruco_action.setShortcut('Ctrl+G')
        aruco_action.setStatusTip('Ouvrir le g√©n√©rateur de codes ArUco')
        aruco_action.triggered.connect(self.show_aruco_generator)
        tools_menu.addAction(aruco_action)
        
        # Menu Aide
        help_menu = menubar.addMenu('&Aide')
        
        about_action = QAction('&√Ä propos...', self)
        about_status_tip = self.config.get('ui', 'main_window.about.status_tip', 'Informations sur l\'application')
        about_action.setStatusTip(about_status_tip)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
        
        logger.info("üìã Barre de menu cr√©√©e avec g√©n√©rateur ArUco")
    
    def create_toolbar(self):
        """Cr√©ation de la barre d'outils"""
        layout_config = self.config.get('ui', 'layout', {})
        if not layout_config.get('toolbar', True):
            return
        
        toolbar = self.addToolBar('Outils')
        
        # Action d√©marrage acquisition
        start_action = QAction('‚ñ∂Ô∏è D√©marrer', self)
        start_action.setStatusTip('D√©marrer l\'acquisition')
        start_action.triggered.connect(self.start_acquisition)
        toolbar.addAction(start_action)
        
        # Action arr√™t acquisition
        stop_action = QAction('‚èπÔ∏è Arr√™ter', self)
        stop_action.setStatusTip('Arr√™ter l\'acquisition')
        stop_action.triggered.connect(self.stop_acquisition)
        toolbar.addAction(stop_action)
        
        toolbar.addSeparator()
        
        # Action g√©n√©rateur ArUco
        aruco_action = QAction('üéØ ArUco', self)
        aruco_action.setStatusTip('G√©n√©rateur de codes ArUco')
        aruco_action.triggered.connect(self.show_aruco_generator)
        toolbar.addAction(aruco_action)
        
        logger.info("üîß Barre d'outils cr√©√©e")
    
    def create_status_bar(self):
        """Cr√©ation de la barre de statut"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage('Pr√™t')
    
    def apply_theme(self):
        """Application du th√®me depuis la configuration"""
        theme_config = self.config.get('ui', 'theme', {})
        
        if theme_config.get('dark_mode', False):
            self.setStyleSheet("""
                QMainWindow { background-color: #2b2b2b; color: #ffffff; }
                QTabWidget::pane { border: 1px solid #555555; }
                QTabBar::tab { background-color: #3b3b3b; padding: 8px; margin: 2px; }
                QTabBar::tab:selected { background-color: #555555; }
            """)
    
    def center_window(self):
        """Centre la fen√™tre sur l'√©cran"""
        screen = QApplication.primaryScreen()
        if screen:
            screen_rect = screen.geometry()
            window_rect = self.geometry()
            
            x = (screen_rect.width() - window_rect.width()) // 2
            y = (screen_rect.height() - window_rect.height()) // 2
            
            self.move(x, y)
    
    def connect_signals(self):
        """Connexion des signaux entre composants"""
        # Connexion des signaux inter-onglets
        if 'camera' in self.tabs and 'target' in self.tabs:
            # Signal nouvelle frame cam√©ra vers onglet cible
            if hasattr(self.tabs['camera'], 'frame_captured'):
                self.tabs['camera'].frame_captured.connect(self._on_camera_frame)
    
    def _on_camera_frame(self, alias, frame_data):
        """Callback r√©ception frame cam√©ra"""
        # Transmission vers onglet cible si actif
        if 'target' in self.tabs and hasattr(self.tabs['target'], '_on_new_frame'):
            self.tabs['target']._on_new_frame(frame_data.get('color'))
    
    def show_aruco_generator(self):
        """Affiche le g√©n√©rateur ArUco"""
        try:
            dialog = ArUcoGeneratorDialog(self.config, self)
            dialog.exec()
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Impossible d'ouvrir le g√©n√©rateur ArUco:\n{e}")
            logger.error(f"‚ùå Erreur g√©n√©rateur ArUco: {e}")
    
    def open_trajectory_file(self):
        """Ouvre un fichier de trajectoire"""
        # TODO: Impl√©mentation ouverture fichier trajectoire
        QMessageBox.information(self, "Information", "Fonctionnalit√© en d√©veloppement")
    
    def start_acquisition(self):
        """D√©marre l'acquisition"""
        if 'camera' in self.tabs and hasattr(self.tabs['camera'], '_start_streaming'):
            self.tabs['camera']._start_streaming()
            self.status_bar.showMessage('Acquisition d√©marr√©e')
        else:
            self.status_bar.showMessage('Aucune cam√©ra disponible')
    
    def stop_acquisition(self):
        """Arr√™te l'acquisition"""
        if 'camera' in self.tabs and hasattr(self.tabs['camera'], '_stop_streaming'):
            self.tabs['camera']._stop_streaming()
            self.status_bar.showMessage('Acquisition arr√™t√©e')
    
    def update_status(self):
        """Met √† jour la barre de statut"""
        if 'camera' in self.tabs and hasattr(self.tabs['camera'], 'is_streaming'):
            if self.tabs['camera'].is_streaming:
                # Affichage FPS si disponible
                fps = getattr(self.tabs['camera'], 'current_fps', 0)
                self.status_bar.showMessage(f'Acquisition en cours - {fps:.1f} FPS')
        
        # Mise √† jour informations onglet cible
        if 'target' in self.tabs and hasattr(self.tabs['target'], 'is_tracking'):
            if self.tabs['target'].is_tracking:
                targets_count = len(getattr(self.tabs['target'], 'detected_targets', []))
                current_msg = self.status_bar.currentMessage()
                if 'Acquisition' in current_msg:
                    self.status_bar.showMessage(f'{current_msg} - {targets_count} cibles')
    
    def show_about(self):
        """Affiche les informations sur l'application"""
        about_text = f"""
        <h3>Robot Trajectory Controller</h3>
        <p>Version 1.3</p>
        <p>Syst√®me de contr√¥le de trajectoire robotique par vision industrielle.</p>
        <p>Avec g√©n√©rateur ArUco int√©gr√© et onglet Cible.</p>
        
        <p><b>Fonctionnalit√©s:</b></p>
        <ul>
        <li>Tracking temps r√©el (2D/3D)</li>
        <li>D√©tection multi-cibles (ArUco, r√©fl√©chissants, LEDs)</li>
        <li>Calibration cam√©ra-robot</li>
        <li>G√©n√©ration de codes ArUco</li>
        <li>Analyse de trajectoires</li>
        <li>Rapports PDF automatiques</li>
        </ul>
        """
        
        QMessageBox.about(self, '√Ä propos', about_text)
    
    def closeEvent(self, event):
        """Gestion de la fermeture de l'application"""
        try:
            # Arr√™t du timer
            self.update_timer.stop()
            
            # Nettoyage camera manager
            if hasattr(self, 'camera_manager'):
                self.camera_manager.close_all_cameras()
                logger.info("üì∑ Toutes les cam√©ras ferm√©es")
            
            # Nettoyage des onglets
            for tab_name, tab_instance in self.tabs.items():
                if hasattr(tab_instance, 'cleanup'):
                    tab_instance.cleanup()
                elif hasattr(tab_instance, 'closeEvent'):
                    # Simulation closeEvent pour l'onglet
                    try:
                        tab_instance.closeEvent(event)
                    except:
                        pass
            
            # Sauvegarde de la configuration si modifi√©e
            if hasattr(self.config, 'save_all_configs'):
                self.config.save_all_configs()
            
            logger.info("üëã Fermeture de l'application")
            event.accept()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la fermeture: {e}")
            event.accept()  # Fermer quand m√™me
    
    def resizeEvent(self, event):
        """Gestion du redimensionnement avec protection"""
        super().resizeEvent(event)
        
        try:
            new_size = event.size()
            
            # V√©rification que la m√©thode set() existe
            if hasattr(self.config, 'set'):
                self.config.set('ui', 'window.width', new_size.width())
                self.config.set('ui', 'window.height', new_size.height())
            else:
                logger.debug(f"M√©thode set() non disponible - taille: {new_size.width()}x{new_size.height()}")
        
        except Exception as e:
            logger.debug(f"Erreur sauvegarde taille fen√™tre: {e}")
            pass


# Point d'entr√©e pour test
if __name__ == "__main__":
    from core.config_manager import ConfigManager
    from PyQt6.QtWidgets import QLabel
    
    app = QApplication(sys.argv)
    config = ConfigManager()
    window = MainWindow(config)
    window.show()
    
    sys.exit(app.exec())