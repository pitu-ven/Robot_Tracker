# robot_tracker/ui/main_window.py
# Version 1.2 - Correction compl√®te ArUco
# Modification: Suppression ArUcoConfig obsol√®te, correction imports

from PyQt6.QtWidgets import (QMainWindow, QTabWidget, QWidget, QVBoxLayout, 
                           QStatusBar, QMenuBar, QToolBar, QMessageBox, QApplication, QDialog)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QIcon, QFont, QAction, QPalette, QColor
import sys
import logging

from .camera_tab import CameraTab
from .trajectory_tab import TrajectoryTab
from .target_tab import TargetTab
from .calibration_tab import CalibrationTab
from .measures_tab import MeasuresTab
from .aruco_generator import ArUcoGeneratorDialog  # Import direct corrig√©

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MainWindow(QMainWindow):
    """Fen√™tre principale avec int√©gration ArUco corrig√©e"""
    
    def __init__(self, config):
        super().__init__()
        
        # Configuration
        self.config = config
        self.tabs = {}
        
        # Interface
        self.init_ui()
        self.apply_theme()
        self.center_window()
        self.connect_signals()
        
        # Timer pour mise √† jour p√©riodique
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_status)
        self.update_timer.start(1000)
        
        logger.info("‚úÖ MainWindow initialis√© avec succ√®s")
    
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        # Configuration fen√™tre
        window_config = self.config.get('ui', 'window', {})
        
        title = window_config.get('title', 'Robot Trajectory Controller v1.0')
        width = window_config.get('width', 1536)
        height = window_config.get('height', 937)
        
        self.setWindowTitle(title)
        self.resize(width, height)
        
        logger.info(f"üìê Fen√™tre configur√©e: {width}x{height}, titre: '{title}'")
        
        # Widget central avec onglets
        self.central_widget = QTabWidget()
        self.setCentralWidget(self.central_widget)
        
        # Interface
        self.create_menu_bar()
        self.create_toolbar()
        self.create_tabs()
        self.create_status_bar()
    
    def create_tabs(self):
        """Cr√©e les onglets de l'application"""
        tab_configs = self.config.get('ui', 'tabs', {})
        tab_names = tab_configs.get('tab_names', ["Cam√©ra", "Trajectoire", "Cible", "Calibration", "Mesures"])
        
        # Onglet 1: Cam√©ra
        self.tabs['camera'] = CameraTab(self.config)
        self.central_widget.addTab(self.tabs['camera'], tab_names[0])
        logger.info(f"üìë Onglet '{tab_names[0]}' cr√©√© avec succ√®s")
        
        # Onglet 2: Trajectoire
        self.tabs['trajectory'] = TrajectoryTab(self.config)
        self.central_widget.addTab(self.tabs['trajectory'], tab_names[1])
        logger.info(f"üìë Onglet '{tab_names[1]}' cr√©√© avec succ√®s")
        
        # Onglet 3: Cible
        self.tabs['target'] = TargetTab(self.config)
        self.central_widget.addTab(self.tabs['target'], tab_names[2])
        logger.info(f"üìë Onglet '{tab_names[2]}' cr√©√© avec succ√®s")
        
        # Onglet 4: Calibration
        self.tabs['calibration'] = CalibrationTab(self.config)
        self.central_widget.addTab(self.tabs['calibration'], tab_names[3])
        logger.info(f"üìë Onglet '{tab_names[3]}' cr√©√© avec succ√®s")
        
        # Onglet 5: Mesures
        self.tabs['measures'] = MeasuresTab(self.config)
        self.central_widget.addTab(self.tabs['measures'], tab_names[4])
        logger.info(f"üìë Onglet '{tab_names[4]}' cr√©√© avec succ√®s")
        
        logger.info(f"üìë {len(self.tabs)} onglets cr√©√©s avec succ√®s")
        
        # Onglet par d√©faut
        default_tab = tab_configs.get('default_tab', 0)
        if 0 <= default_tab < self.central_widget.count():
            self.central_widget.setCurrentIndex(default_tab)
    
    def create_menu_bar(self):
        """Cr√©ation de la barre de menu avec g√©n√©rateur ArUco"""
        layout_config = self.config.get('ui', 'layout', {})
        if not layout_config.get('menu_bar', True):
            return
        
        menubar = self.menuBar()
        
        # Menu Fichier
        file_menu = menubar.addMenu('&Fichier')
        
        open_action = QAction('&Ouvrir Trajectoire...', self)
        open_action.setShortcut('Ctrl+O')
        open_action.setStatusTip('Charger un fichier de trajectoire')
        open_action.triggered.connect(self.open_trajectory_file)
        file_menu.addAction(open_action)
        
        save_action = QAction('&Sauvegarder Rapport...', self)
        save_action.setShortcut('Ctrl+S')
        save_action.setStatusTip('Sauvegarder le rapport PDF')
        save_action.triggered.connect(self.save_report)
        file_menu.addAction(save_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction('&Quitter', self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.setStatusTip('Quitter l\'application')
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # Menu Configuration avec ArUco
        config_menu = menubar.addMenu('&Configuration')
        
        camera_config_action = QAction('&Cam√©ras...', self)
        camera_config_action.setStatusTip('Configuration des cam√©ras')
        camera_config_action.triggered.connect(self.configure_cameras)
        config_menu.addAction(camera_config_action)
        
        robot_config_action = QAction('&Robot...', self)
        robot_config_action.setStatusTip('Configuration de la communication robot')
        robot_config_action.triggered.connect(self.configure_robot)
        config_menu.addAction(robot_config_action)
        
        config_menu.addSeparator()
        
        # G√âN√âRATEUR ARUCO CORRIG√â
        aruco_generator_action = QAction('üéØ &G√©n√©rateur ArUco...', self)
        aruco_generator_action.setStatusTip('G√©n√©rer et imprimer des codes ArUco')
        aruco_generator_action.triggered.connect(self.open_aruco_generator)
        config_menu.addAction(aruco_generator_action)
        
        # Menu Outils
        tools_menu = menubar.addMenu('&Outils')
        
        calibrate_action = QAction('&Calibrer Cam√©ra-Robot...', self)
        calibrate_action.setStatusTip('Lancer la calibration cam√©ra-robot')
        calibrate_action.triggered.connect(self.start_calibration)
        tools_menu.addAction(calibrate_action)
        
        # Menu Aide
        help_menu = menubar.addMenu('&Aide')
        
        about_action = QAction('&√Ä propos...', self)
        about_action.setStatusTip('Informations sur l\'application')
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
        
        logger.info("üìã Barre de menu cr√©√©e avec g√©n√©rateur ArUco")
    
    def create_toolbar(self):
        """Cr√©ation de la barre d'outils"""
        layout_config = self.config.get('ui', 'layout', {})
        if not layout_config.get('toolbar', True):
            return
        
        toolbar = self.addToolBar('Principal')
        
        # Actions principales
        start_action = QAction('‚ñ∂Ô∏è D√©marrer', self)
        start_action.setStatusTip('D√©marrer l\'acquisition')
        start_action.triggered.connect(self.start_acquisition)
        toolbar.addAction(start_action)
        
        stop_action = QAction('‚èπÔ∏è Arr√™ter', self)
        stop_action.setStatusTip('Arr√™ter l\'acquisition')
        stop_action.triggered.connect(self.stop_acquisition)
        toolbar.addAction(stop_action)
        
        toolbar.addSeparator()
        
        # ArUco dans la toolbar
        aruco_action = QAction('üéØ ArUco', self)
        aruco_action.setStatusTip('G√©n√©rateur de codes ArUco')
        aruco_action.triggered.connect(self.open_aruco_generator)
        toolbar.addAction(aruco_action)
        
        logger.info("üîß Barre d'outils cr√©√©e")
    
    def create_status_bar(self):
        """Cr√©ation de la barre de statut"""
        self.status_bar = self.statusBar()
        
        status_config = self.config.get('ui', 'status_bar', {})
        ready_message = status_config.get('ready_message', 'Pr√™t')
        
        self.status_bar.showMessage(ready_message)
        logger.info("üìä Barre de status cr√©√©e")
    
    def apply_theme(self):
        """Application du th√®me depuis la configuration"""
        theme_config = self.config.get('ui', 'theme', {})
        style_name = theme_config.get('style', 'Fusion')
        
        QApplication.instance().setStyle(style_name)
        
        if theme_config.get('dark_mode', True):
            self.apply_dark_theme()
            logger.info(f"üé® Th√®me appliqu√©: {style_name}, palette: dark")
        else:
            logger.info(f"üé® Th√®me appliqu√©: {style_name}, palette: default")
        
        # Police personnalis√©e
        font_config = theme_config.get('font', {})
        if font_config:
            font = QFont(
                font_config.get('family', 'Segoe UI'),
                font_config.get('size', 10)
            )
            QApplication.instance().setFont(font)
    
    def apply_dark_theme(self):
        """Application du th√®me sombre"""
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor(53, 53, 53))
        palette.setColor(QPalette.ColorRole.WindowText, QColor(255, 255, 255))
        palette.setColor(QPalette.ColorRole.Base, QColor(25, 25, 25))
        palette.setColor(QPalette.ColorRole.AlternateBase, QColor(53, 53, 53))
        palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(0, 0, 0))
        palette.setColor(QPalette.ColorRole.ToolTipText, QColor(255, 255, 255))
        palette.setColor(QPalette.ColorRole.Text, QColor(255, 255, 255))
        palette.setColor(QPalette.ColorRole.Button, QColor(53, 53, 53))
        palette.setColor(QPalette.ColorRole.ButtonText, QColor(255, 255, 255))
        palette.setColor(QPalette.ColorRole.BrightText, QColor(255, 0, 0))
        palette.setColor(QPalette.ColorRole.Link, QColor(42, 130, 218))
        palette.setColor(QPalette.ColorRole.Highlight, QColor(42, 130, 218))
        palette.setColor(QPalette.ColorRole.HighlightedText, QColor(0, 0, 0))
        
        QApplication.instance().setPalette(palette)
    
    def center_window(self):
        """Centre la fen√™tre sur l'√©cran"""
        screen = QApplication.primaryScreen().geometry()
        window_geometry = self.geometry()
        
        x = (screen.width() - window_geometry.width()) // 2
        y = (screen.height() - window_geometry.height()) // 2
        
        self.move(x, y)
        logger.info(f"üéØ Fen√™tre centr√©e √† ({x}, {y})")
    
    def connect_signals(self):
        """Connecte les signaux de l'interface"""
        # Connexions des onglets si n√©cessaire
        logger.info("üîó Connexions √©tablies")
    
    def open_aruco_generator(self):
        """Ouvre le g√©n√©rateur ArUco - VERSION CORRIG√âE"""
        try:
            logger.info("üéØ Ouverture du g√©n√©rateur ArUco")
            
            # V√©rification de la disponibilit√© d'OpenCV ArUco
            import cv2
            if not hasattr(cv2, 'aruco'):
                QMessageBox.warning(
                    self, "ArUco indisponible",
                    "Le module OpenCV ArUco n'est pas disponible.\n"
                    "Installez opencv-contrib-python pour utiliser cette fonctionnalit√©."
                )
                return
            
            # CORRECTION : Utiliser directement le ConfigManager
            dialog = ArUcoGeneratorDialog(self.config, self)
            result = dialog.exec()
            
            if result == QDialog.DialogCode.Accepted:
                logger.info("‚úÖ G√©n√©rateur ArUco ferm√© avec succ√®s")
            else:
                logger.info("üìù G√©n√©rateur ArUco ferm√©")
                
        except ImportError as e:
            QMessageBox.critical(
                self, "Erreur d'import",
                f"Impossible d'importer le g√©n√©rateur ArUco:\n{e}\n\n"
                "V√©rifiez l'installation d'OpenCV et la structure des fichiers."
            )
            logger.error(f"‚ùå Erreur import ArUco: {e}")
        except Exception as e:
            logger.error(f"‚ùå Erreur ouverture g√©n√©rateur ArUco: {e}")
            QMessageBox.critical(
                self, "Erreur",
                f"Erreur lors de l'ouverture du g√©n√©rateur ArUco:\n{e}"
            )
    
    # M√©thodes d'action
    def open_trajectory_file(self):
        """Ouvre un fichier de trajectoire"""
        from PyQt6.QtWidgets import QFileDialog
        
        file_path, _ = QFileDialog.getOpenFileName(
            self, 'Ouvrir trajectoire',
            '', 'Fichiers trajectoire (*.val3 *.krl *.gcode);;Tous (*.*)'
        )
        
        if file_path:
            self.tabs['trajectory'].load_trajectory(file_path)
            self.status_bar.showMessage(f'Trajectoire charg√©e: {file_path}')
    
    def save_report(self):
        """Sauvegarde le rapport PDF"""
        from PyQt6.QtWidgets import QFileDialog
        
        file_path, _ = QFileDialog.getSaveFileName(
            self, 'Sauvegarder rapport',
            'rapport_trajectoire.pdf', 'Fichiers PDF (*.pdf)'
        )
        
        if file_path:
            if self.tabs['measures'].generate_pdf_report(file_path):
                self.status_bar.showMessage(f'Rapport sauvegard√©: {file_path}')
            else:
                QMessageBox.warning(self, 'Erreur', 'Erreur lors de la g√©n√©ration du rapport')
    
    def configure_cameras(self):
        """Configure les cam√©ras"""
        self.tabs['camera'].show_configuration_dialog()
    
    def configure_robot(self):
        """Configure la communication robot"""
        QMessageBox.information(self, 'Info', 'Configuration robot (√† impl√©menter)')
    
    def start_calibration(self):
        """D√©marre la calibration"""
        self.tabs['calibration'].start_calibration_process()
    
    def start_acquisition(self):
        """D√©marre l'acquisition"""
        self.tabs['camera'].start_acquisition()
        self.status_bar.showMessage('Acquisition d√©marr√©e')
    
    def stop_acquisition(self):
        """Arr√™te l'acquisition"""
        self.tabs['camera'].stop_acquisition()
        self.status_bar.showMessage('Acquisition arr√™t√©e')
    
    def update_status(self):
        """Met √† jour la barre de statut"""
        if hasattr(self.tabs.get('camera'), 'is_acquiring') and self.tabs['camera'].is_acquiring:
            fps = getattr(self.tabs['camera'], 'current_fps', 0)
            self.status_bar.showMessage(f'Acquisition en cours - {fps:.1f} FPS')
    
    def show_about(self):
        """Affiche les informations sur l'application"""
        about_text = f"""
        <h3>Robot Trajectory Controller</h3>
        <p>Version 1.2</p>
        <p>Syst√®me de contr√¥le de trajectoire robotique par vision industrielle.</p>
        <p>Avec g√©n√©rateur ArUco int√©gr√©.</p>
        
        <p><b>Fonctionnalit√©s:</b></p>
        <ul>
        <li>Tracking temps r√©el (2D/3D)</li>
        <li>Calibration cam√©ra-robot</li>
        <li>G√©n√©ration de codes ArUco</li>
        <li>Analyse de trajectoires</li>
        <li>Rapports PDF automatiques</li>
        </ul>
        """
        
        QMessageBox.about(self, '√Ä propos', about_text)
    
    def closeEvent(self, event):
        """Gestion de la fermeture de l'application"""
        try:
            # Arr√™t du timer
            self.update_timer.stop()
            
            # Nettoyage des onglets
            for tab_name, tab_instance in self.tabs.items():
                if hasattr(tab_instance, 'cleanup'):
                    tab_instance.cleanup()
            
            # Sauvegarde de la configuration si modifi√©e
            if hasattr(self.config, 'save_all_configs'):
                self.config.save_all_configs()
            
            logger.info("üëã Fermeture de l'application")
            event.accept()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la fermeture: {e}")
            event.accept()  # Fermer quand m√™me
    
    def resizeEvent(self, event):
        """Gestion du redimensionnement avec protection"""
        super().resizeEvent(event)
        
        try:
            new_size = event.size()
            
            # V√©rification que la m√©thode set() existe
            if hasattr(self.config, 'set'):
                self.config.set('ui', 'window.width', new_size.width())
                self.config.set('ui', 'window.height', new_size.height())
            else:
                logger.debug(f"M√©thode set() non disponible - taille: {new_size.width()}x{new_size.height()}")
        
        except Exception as e:
            logger.debug(f"Erreur sauvegarde taille fen√™tre: {e}")
            pass


# Point d'entr√©e pour test
if __name__ == "__main__":
    from core.config_manager import ConfigManager
    
    app = QApplication(sys.argv)
    config = ConfigManager()
    window = MainWindow(config)
    window.show()
    
    sys.exit(app.exec())