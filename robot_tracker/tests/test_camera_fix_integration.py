# tests/test_camera_fix_integration.py
# Version 1.0 - Test des corrections d'ouverture de cam√©ra RealSense
# Modification: Test complet d'int√©gration avec les corrections

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import logging

# Ajout du chemin parent pour les imports
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

def test_camera_manager_with_config():
    """Test du CameraManager avec configuration RealSense"""
    print("üß™ Test CameraManager avec configuration...")
    
    try:
        # Mock pyrealsense2 si n√©cessaire
        has_realsense = True
        try:
            import pyrealsense2 as rs
        except ImportError:
            has_realsense = False
            sys.modules['pyrealsense2'] = type('MockRS', (), {
                'pipeline': type('Pipeline', (), {}),
                'config': type('Config', (), {}),
                'align': type('Align', (), {}),
                'stream': type('Stream', (), {'color': 1, 'depth': 2}),
                'format': type('Format', (), {'bgr8': 1, 'z16': 2}),
                'colorizer': type('Colorizer', (), {})
            })()
            print("‚ö†Ô∏è RealSense mock√© pour les tests")
        
        from core.camera_manager import CameraManager
        
        # Configuration de test compl√®te
        class TestConfig:
            def get(self, section: str, key: str, default=None):
                config_values = {
                    'camera.manager.auto_detect_interval': 5.0,
                    'camera.manager.max_frame_buffer': 5,
                    'camera.realsense.device_serial': None,
                    'camera.realsense.color_width': 640,
                    'camera.realsense.color_height': 480,
                    'camera.realsense.color_fps': 30,
                    'camera.realsense.depth_width': 640,
                    'camera.realsense.depth_height': 480,
                    'camera.realsense.depth_fps': 30,
                    'camera.realsense.enable_filters': True,
                    'camera.realsense.enable_align': True,
                    'camera.realsense.enable_infrared': False,
                    'camera.realsense.version': '2.9'
                }
                return config_values.get(f"{section}.{key}", default)
        
        config = TestConfig()
        manager = CameraManager(config)
        
        print("‚úÖ CameraManager cr√©√© avec configuration RealSense")
        
        # Test d√©tection
        cameras = manager.detect_all_cameras()
        print(f"‚úÖ D√©tection: {len(cameras)} cam√©ra(s)")
        
        # Test m√©thodes critiques
        methods = ['is_camera_open', 'open_camera', 'close_camera', 'get_camera_frame']
        for method in methods:
            if hasattr(manager, method):
                print(f"‚úÖ M√©thode {method} disponible")
            else:
                print(f"‚ùå M√©thode {method} manquante")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test CameraManager: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_realsense_instance_creation():
    """Test cr√©ation d'instance RealSense avec config"""
    print("\nüß™ Test cr√©ation instance RealSense...")
    
    try:
        # Mock pyrealsense2 si n√©cessaire
        try:
            import pyrealsense2 as rs
        except ImportError:
            sys.modules['pyrealsense2'] = type('MockRS', (), {
                'pipeline': type('Pipeline', (), {}),
                'config': type('Config', (), {}),
                'align': type('Align', (), {}),
                'stream': type('Stream', (), {'color': 1, 'depth': 2}),
                'format': type('Format', (), {'bgr8': 1, 'z16': 2}),
                'colorizer': type('Colorizer', (), {}),
                'context': lambda: type('Context', (), {
                    'query_devices': lambda: []
                })()
            })()
        
        from hardware.realsense_driver import RealSenseCamera
        from core.camera_manager import CameraType, CameraInfo
        
        # Configuration de test
        class TestConfig:
            def get(self, section: str, key: str, default=None):
                config_values = {
                    'camera.realsense.device_serial': None,
                    'camera.realsense.color_width': 640,
                    'camera.realsense.color_height': 480,
                    'camera.realsense.color_fps': 30,
                    'camera.realsense.depth_width': 640,
                    'camera.realsense.depth_height': 480,
                    'camera.realsense.depth_fps': 30,
                    'camera.realsense.enable_filters': True,
                    'camera.realsense.enable_align': True,
                    'camera.realsense.version': '2.9'
                }
                return config_values.get(f"{section}.{key}", default)
        
        config = TestConfig()
        
        # Test cr√©ation avec config
        realsense_camera = RealSenseCamera(config)
        print("‚úÖ RealSenseCamera cr√©√©e avec config")
        
        # Test cr√©ation via _create_camera_instance
        from core.camera_manager import CameraManager
        manager = CameraManager(config)
        
        # Simulation d'une CameraInfo RealSense
        camera_info = CameraInfo(
            camera_type=CameraType.REALSENSE,
            device_id="test_serial",
            name="Test RealSense D435",
            details={'serial': 'test_serial', 'name': 'Test RealSense D435'}
        )
        
        instance = manager._create_camera_instance(camera_info)
        if instance:
            print("‚úÖ Instance RealSense cr√©√©e via CameraManager")
        else:
            print("‚ùå √âchec cr√©ation instance via CameraManager")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test cr√©ation instance: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_camera_tab_real_methods():
    """Test que CameraTab utilise de vraies m√©thodes"""
    print("\nüß™ Test CameraTab m√©thodes r√©elles...")
    
    try:
        # Mock pyrealsense2
        try:
            import pyrealsense2 as rs
        except ImportError:
            sys.modules['pyrealsense2'] = type('MockRS', (), {
                'pipeline': type('Pipeline', (), {}),
                'config': type('Config', (), {}),
                'align': type('Align', (), {}),
                'stream': type('Stream', (), {'color': 1, 'depth': 2}),
                'format': type('Format', (), {'bgr8': 1, 'z16': 2}),
                'colorizer': type('Colorizer', (), {}),
                'context': lambda: type('Context', (), {
                    'query_devices': lambda: []
                })()
            })()
        
        from ui.camera_tab import CameraTab
        from core.camera_manager import CameraManager
        
        # Configuration compl√®te
        class TestConfig:
            def get(self, section: str, key: str, default=None):
                config_values = {
                    'ui.camera_tab.version': '4.4',
                    'ui.camera_tab.layout.control_panel_width': 280,
                    'ui.camera_tab.acquisition.default_fps': 30,
                    'ui.camera_tab.timers.stats_interval_ms': 1000,
                    'ui.camera_tab.log.max_lines': 100,
                    'camera.manager.auto_detect_interval': 5.0,
                    'camera.realsense.device_serial': None,
                    'camera.realsense.color_width': 640,
                    'camera.realsense.color_height': 480,
                    'camera.realsense.color_fps': 30
                }
                return config_values.get(f"{section}.{key}", default)
        
        config = TestConfig()
        camera_manager = CameraManager(config)
        
        # V√©rification des m√©thodes du CameraTab (sans cr√©er l'UI)
        class TestCameraTab:
            def __init__(self, camera_manager, config):
                self.camera_manager = camera_manager
                self.config = config
                self.selected_camera = None
                self.active_displays = {}
                self.is_streaming = False
        
        # Importation directe des m√©thodes
        import inspect
        from ui.camera_tab import CameraTab
        
        # V√©rification que les m√©thodes ne sont plus des stubs
        methods_to_check = [
            '_open_selected_camera',
            '_close_selected_camera', 
            '_start_streaming',
            '_stop_streaming',
            '_update_camera_frames',
            '_capture_frame',
            '_save_image'
        ]
        
        for method_name in methods_to_check:
            if hasattr(CameraTab, method_name):
                method = getattr(CameraTab, method_name)
                source = inspect.getsource(method)
                
                # V√©rification qu'il n'y a plus de "stub" dans le code
                if "stub" in source.lower() or "version test" in source.lower():
                    print(f"‚ùå {method_name} contient encore du code stub")
                    return False
                else:
                    print(f"‚úÖ {method_name} impl√©ment√©e (pas de stub)")
            else:
                print(f"‚ùå M√©thode {method_name} manquante")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test CameraTab: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_integration_complete():
    """Test d'int√©gration compl√®te"""
    print("\nüß™ Test int√©gration compl√®te...")
    
    try:
        # Mock pyrealsense2
        try:
            import pyrealsense2 as rs
        except ImportError:
            sys.modules['pyrealsense2'] = type('MockRS', (), {
                'pipeline': type('Pipeline', (), {
                    'start': lambda self, config=None: None,
                    'stop': lambda self: None,
                    'wait_for_frames': lambda self, timeout_ms=5000: type('Frameset', (), {
                        'get_color_frame': lambda: type('Frame', (), {'get_data': lambda: None})(),
                        'get_depth_frame': lambda: type('Frame', (), {'get_data': lambda: None})()
                    })()
                })(),
                'config': type('Config', (), {
                    'enable_device': lambda self, serial: None,
                    'enable_stream': lambda self, *args: None
                })(),
                'align': type('Align', (), {})(),
                'stream': type('Stream', (), {'color': 1, 'depth': 2}),
                'format': type('Format', (), {'bgr8': 1, 'z16': 2}),
                'colorizer': type('Colorizer', (), {}),
                'context': lambda: type('Context', (), {
                    'query_devices': lambda: []
                })()
            })()
        
        from core.camera_manager import CameraManager, CameraInfo, CameraType
        
        # Configuration de test
        class TestConfig:
            def get(self, section: str, key: str, default=None):
                config_values = {
                    'camera.manager.auto_detect_interval': 5.0,
                    'camera.manager.max_frame_buffer': 5,
                    'camera.realsense.device_serial': None,
                    'camera.realsense.color_width': 640,
                    'camera.realsense.color_height': 480,
                    'camera.realsense.color_fps': 30,
                    'camera.realsense.depth_width': 640,
                    'camera.realsense.depth_height': 480,
                    'camera.realsense.depth_fps': 30,
                    'camera.realsense.enable_filters': True,
                    'camera.realsense.enable_align': True,
                    'camera.realsense.version': '2.9'
                }
                return config_values.get(f"{section}.{key}", default)
        
        config = TestConfig()
        manager = CameraManager(config)
        
        # Simulation d'une cam√©ra RealSense
        test_camera = CameraInfo(
            camera_type=CameraType.REALSENSE,
            device_id="014122072611",  # M√™me serial que dans les logs
            name="Intel RealSense D435",
            details={'serial': '014122072611', 'name': 'Intel RealSense D435'}
        )
        
        print("‚úÖ CameraInfo RealSense cr√©√©e")
        
        # Test cr√©ation d'instance
        instance = manager._create_camera_instance(test_camera)
        if instance is None:
            print("‚ùå √âchec cr√©ation instance RealSense")
            return False
        
        print("‚úÖ Instance RealSense cr√©√©e avec config")
        
        # Test que la config est bien pass√©e
        if hasattr(instance, 'config'):
            print("‚úÖ Configuration transmise √† l'instance RealSense")
        else:
            print("‚ùå Configuration non transmise √† l'instance")
            return False
        
        # Test d'ouverture (simulation)
        alias = "test_realsense"
        
        # Dans un vrai test, l'ouverture √©chouerait car pas de vraie cam√©ra
        # Mais on peut v√©rifier que le code ne plante pas
        try:
            success = manager.open_camera(test_camera, alias)
            # On s'attend √† un √©chec car pas de vraie cam√©ra
            if success:
                print("‚úÖ Ouverture simul√©e r√©ussie (inattendu mais pas grave)")
                manager.close_camera(alias)
            else:
                print("‚úÖ √âchec ouverture attendu (pas de vraie cam√©ra)")
        except Exception as e:
            print(f"‚úÖ Exception attendue lors de l'ouverture: {type(e).__name__}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test int√©gration: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_diagnostic():
    """Diagnostic complet du probl√®me"""
    print("üîç DIAGNOSTIC DU PROBL√àME D'OUVERTURE REALSENSE")
    print("=" * 60)
    
    # 1. V√©rification des imports
    print("\n1Ô∏è‚É£ V√©rification des imports...")
    try:
        import pyrealsense2 as rs
        print("‚úÖ pyrealsense2 disponible")
        
        # Test contexte RealSense
        ctx = rs.context()
        devices = ctx.query_devices()
        print(f"‚úÖ {len(devices)} device(s) RealSense d√©tect√©(s)")
        
    except ImportError as e:
        print(f"‚ùå pyrealsense2 non disponible: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur d√©tection RealSense: {e}")
    
    # 2. V√©rification structure projet
    print("\n2Ô∏è‚É£ V√©rification structure projet...")
    project_files = [
        'core/camera_manager.py',
        'hardware/realsense_driver.py',
        'ui/camera_tab.py'
    ]
    
    for file_path in project_files:
        full_path = os.path.join(project_root, file_path)
        if os.path.exists(full_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} manquant")
    
    # 3. Test imports du projet
    print("\n3Ô∏è‚É£ Test imports du projet...")
    try:
        from core.camera_manager import CameraManager
        print("‚úÖ CameraManager import√©")
        
        from hardware.realsense_driver import RealSenseCamera
        print("‚úÖ RealSenseCamera import√©")
        
    except Exception as e:
        print(f"‚ùå Erreur imports: {e}")
        return False
    
    # 4. Analyse du probl√®me sp√©cifique
    print("\n4Ô∏è‚É£ Analyse du probl√®me...")
    print("D'apr√®s les logs fournis:")
    print("- ‚úÖ RealSense d√©tect√©e: Intel RealSense D435 (S/N: 014122072611)")
    print("- ‚úÖ CameraManager v2.8 initialis√©")
    print("- ‚ùå camera_tab affiche '‚ö†Ô∏è Version test - _open_selected_camera stub'")
    print("- üîß SOLUTION: Remplacer les m√©thodes stub par les vraies impl√©mentations")
    
    return True

def main():
    """Point d'entr√©e principal"""
    print("üöÄ TEST DES CORRECTIONS D'OUVERTURE CAMERA REALSENSE")
    print("=" * 60)
    
    # R√©duction du logging pour se concentrer sur les tests
    logging.getLogger().setLevel(logging.ERROR)
    
    # Diagnostic pr√©liminaire
    if not run_diagnostic():
        print("\n‚ùå Diagnostic √©chou√© - Arr√™t des tests")
        return False
    
    # Tests des corrections
    tests = [
        ("CameraManager avec config", test_camera_manager_with_config),
        ("Cr√©ation instance RealSense", test_realsense_instance_creation),
        ("CameraTab m√©thodes r√©elles", test_camera_tab_real_methods),
        ("Int√©gration compl√®te", test_integration_complete)
    ]
    
    results = []
    
    print("\n" + "=" * 60)
    print("üß™ EX√âCUTION DES TESTS")
    print("=" * 60)
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
            
            if result:
                print(f"‚úÖ {test_name}: PASS√â")
            else:
                print(f"‚ùå {test_name}: √âCHOU√â")
                
        except Exception as e:
            print(f"‚ùå {test_name}: ERREUR - {e}")
            results.append((test_name, False))
    
    # R√©sultats finaux
    print("\n" + "=" * 60)
    print("üìä R√âSULTATS FINAUX")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{test_name:<30} : {status}")
    
    print(f"\nüìà Score: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("\nüéâ TOUTES LES CORRECTIONS SEMBLENT FONCTIONNER!")
        print("\nüí° Prochaines √©tapes:")
        print("   1. Appliquer les corrections aux fichiers du projet")
        print("   2. Tester avec une vraie cam√©ra RealSense")
        print("   3. V√©rifier que l'ouverture fonctionne correctement")
        return True
    else:
        print(f"\n‚ö†Ô∏è {total - passed} test(s) √©chou√©(s)")
        print("   Des corrections suppl√©mentaires peuvent √™tre n√©cessaires")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)