#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
robot_tracker/tests/aruco_demo.py
D√©monstration du g√©n√©rateur ArUco - Version 1.0
Modification: Script de d√©monstration pour valider le g√©n√©rateur ArUco
"""

import sys
import os
from pathlib import Path
from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton
from PyQt6.QtCore import Qt

# Ajout du chemin parent pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from robot_tracker.ui.aruco_generator import ArUcoGeneratorDialog
    from ui.main_window import ArUcoConfig
    from core.config_manager import ConfigManager
except ImportError as e:
    print(f"‚ùå Erreur import: {e}")
    print("üí° Ex√©cutez depuis le r√©pertoire robot_tracker/")
    sys.exit(1)

class ArUcoDemoWindow(QMainWindow):
    """Fen√™tre de d√©monstration pour le g√©n√©rateur ArUco"""
    
    def __init__(self):
        super().__init__()
        self.config_manager = ConfigManager()
        self.aruco_config = ArUcoConfig(self.config_manager)
        self.init_ui()
    
    def init_ui(self):
        """Initialise l'interface de d√©monstration"""
        self.setWindowTitle("üéØ D√©mo G√©n√©rateur ArUco - Robot Tracker")
        self.setGeometry(100, 100, 400, 300)
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # Instructions
        from PyQt6.QtWidgets import QLabel
        instructions = QLabel("""
        <h2>üéØ D√©monstration du G√©n√©rateur ArUco</h2>
        <p>Ce g√©n√©rateur permet de cr√©er et d'imprimer des codes ArUco 
        pour le tracking robotique.</p>
        
        <h3>Fonctionnalit√©s :</h3>
        <ul>
        <li>‚úÖ G√©n√©ration de marqueurs ArUco</li>
        <li>‚úÖ Plusieurs dictionnaires disponibles</li>
        <li>‚úÖ Aper√ßu temps r√©el</li>
        <li>‚úÖ Export en images haute qualit√©</li>
        <li>‚úÖ Impression directe</li>
        <li>‚úÖ Options de personnalisation</li>
        </ul>
        
        <p><b>Cliquez sur le bouton ci-dessous pour ouvrir le g√©n√©rateur.</b></p>
        """)
        instructions.setWordWrap(True)
        instructions.setAlignment(Qt.AlignmentFlag.AlignTop)
        layout.addWidget(instructions)
        
        # Bouton de lancement
        launch_btn = QPushButton("üöÄ Ouvrir le G√©n√©rateur ArUco")
        launch_btn.setMinimumHeight(50)
        launch_btn.setStyleSheet("""
            QPushButton {
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #0056b3;
            }
            QPushButton:pressed {
                background-color: #004085;
            }
        """)
        launch_btn.clicked.connect(self.open_aruco_generator)
        layout.addWidget(launch_btn)
        
        # Bouton de test
        test_btn = QPushButton("üß™ Lancer les Tests")
        test_btn.setMinimumHeight(40)
        test_btn.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                border-radius: 6px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #218838;
            }
        """)
        test_btn.clicked.connect(self.run_tests)
        layout.addWidget(test_btn)
        
        layout.addStretch()
    
    def open_aruco_generator(self):
        """Ouvre le g√©n√©rateur ArUco"""
        try:
            print("üéØ Ouverture du g√©n√©rateur ArUco...")
            
            dialog = ArUcoGeneratorDialog(self.aruco_config, self)
            dialog.exec()
            
            print("‚úÖ G√©n√©rateur ArUco ferm√©")
            
        except Exception as e:
            print(f"‚ùå Erreur ouverture g√©n√©rateur: {e}")
            from PyQt6.QtWidgets import QMessageBox
            QMessageBox.critical(self, "Erreur", f"Erreur lors de l'ouverture:\n{e}")
    
    def run_tests(self):
        """Lance les tests du g√©n√©rateur"""
        try:
            print("üß™ Lancement des tests...")
            
            from robot_tracker.ui.aruco_generator import TestArUcoGenerator
            
            tester = TestArUcoGenerator()
            success = tester.run_all_tests()
            
            from PyQt6.QtWidgets import QMessageBox
            if success:
                QMessageBox.information(self, "Tests", "‚úÖ Tous les tests sont pass√©s avec succ√®s!")
            else:
                QMessageBox.warning(self, "Tests", "‚ö†Ô∏è Certains tests ont √©chou√©. Consultez la console.")
            
        except Exception as e:
            print(f"‚ùå Erreur lors des tests: {e}")
            from PyQt6.QtWidgets import QMessageBox
            QMessageBox.critical(self, "Erreur", f"Erreur lors des tests:\n{e}")

def check_dependencies():
    """V√©rifie les d√©pendances n√©cessaires"""
    print("üîç V√©rification des d√©pendances...")
    
    dependencies = {
        'PyQt6': None,
        'OpenCV': None,
        'NumPy': None
    }
    
    try:
        import PyQt6
        dependencies['PyQt6'] = PyQt6.QtCore.PYQT_VERSION_STR
        print(f"‚úÖ PyQt6: {dependencies['PyQt6']}")
    except ImportError:
        print("‚ùå PyQt6 manquant")
        return False
    
    try:
        import cv2
        dependencies['OpenCV'] = cv2.__version__
        print(f"‚úÖ OpenCV: {dependencies['OpenCV']}")
        
        # Test sp√©cifique ArUco
        dict_test = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_50)
        print("‚úÖ Dictionnaires ArUco disponibles")
        
    except ImportError:
        print("‚ùå OpenCV manquant")
        return False
    except Exception as e:
        print(f"‚ùå Probl√®me ArUco: {e}")
        return False
    
    try:
        import numpy as np
        dependencies['NumPy'] = np.__version__
        print(f"‚úÖ NumPy: {dependencies['NumPy']}")
    except ImportError:
        print("‚ùå NumPy manquant")
        return False
    
    print("‚úÖ Toutes les d√©pendances sont satisfaites")
    return True

def main():
    """Point d'entr√©e principal de la d√©monstration"""
    print("üéØ D√©monstration du G√©n√©rateur ArUco")
    print("Robot Trajectory Controller")
    print("=" * 50)
    
    # V√©rification des d√©pendances
    if not check_dependencies():
        print("\n‚ùå D√©pendances manquantes. Installation requise:")
        print("pip install PyQt6 opencv-python numpy")
        return 1
    
    # V√©rification de la structure des fichiers
    current_dir = Path(__file__).parent.parent
    required_files = [
        'ui/aruco_generator.py',
        'core/config_manager.py'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not (current_dir / file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ùå Fichiers manquants:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        print("\nüí° Assurez-vous d'ex√©cuter depuis le r√©pertoire robot_tracker/")
        return 1
    
    # Lancement de l'application
    try:
        app = QApplication(sys.argv)
        app.setApplicationName("ArUco Generator Demo")
        app.setApplicationVersion("1.0")
        
        # Configuration du style
        app.setStyle("Fusion")
        
        # Cr√©ation de la fen√™tre
        window = ArUcoDemoWindow()
        window.show()
        
        print("\nüöÄ D√©monstration lanc√©e!")
        print("üí° Utilisez l'interface pour tester le g√©n√©rateur ArUco")
        print("üîÑ Fermez la fen√™tre pour terminer")
        
        # Boucle √©v√©nementielle
        exit_code = app.exec()
        
        print(f"\nüëã D√©monstration termin√©e (code: {exit_code})")
        return exit_code
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du lancement: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è D√©monstration interrompue par l'utilisateur")
        sys.exit(1)