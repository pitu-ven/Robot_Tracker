# tests/test_logging_verbosity.py
# Version 1.0 - Test syst√®me verbosit√© logging
# Modification: Test des diff√©rents niveaux de verbosit√©

import sys
import logging
import tempfile
import json
from pathlib import Path

# Ajout du chemin vers le module principal
sys.path.append(str(Path(__file__).parent.parent))

from core.config_manager import ConfigManager
from utils.logging_utils import VerbosityManager, setup_application_logging


def create_test_config(verbosity: str = "Moyenne") -> Path:
    """Cr√©e une configuration de test temporaire"""
    config_data = {
        "logging": {
            "console_verbosity": verbosity,
            "available_levels": ["Faible", "Moyenne", "Debug"],
            "descriptions": {
                "Faible": "Erreurs et avertissements uniquement",
                "Moyenne": "Informations importantes + erreurs/avertissements", 
                "Debug": "Tous les messages de d√©bogage d√©taill√©s"
            }
        },
        "window": {
            "title": "Test App",
            "width": 800,
            "height": 600
        }
    }
    
    # Cr√©ation d'un fichier temporaire
    temp_dir = Path(tempfile.mkdtemp())
    config_file = temp_dir / "ui_config.json"
    
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(config_data, f, indent=2)
    
    return temp_dir


def test_verbosity_levels():
    """Test des diff√©rents niveaux de verbosit√©"""
    
    print("üß™ Test des niveaux de verbosit√©")
    print("=" * 50)
    
    levels_to_test = ["Faible", "Moyenne", "Debug"]
    
    for level in levels_to_test:
        print(f"\nüìã Test niveau: {level}")
        print("-" * 30)
        
        # Cr√©ation d'une config de test
        config_dir = create_test_config(level)
        
        try:
            # Chargement de la configuration
            config = ConfigManager(config_dir)
            
            # V√©rification de la r√©cup√©ration du niveau
            retrieved_level = config.get_logging_verbosity()
            assert retrieved_level == level, f"Niveau attendu: {level}, obtenu: {retrieved_level}"
            
            # Configuration du logging
            VerbosityManager.setup_logging(level, config)
            
            # Test des diff√©rents types de messages
            logger = logging.getLogger("test_logger")
            
            print(f"‚úÖ Configuration niveau '{level}' r√©ussie")
            
            # Messages de test selon le niveau configur√©
            logger.debug(f"üîç Message DEBUG - Niveau {level}")
            logger.info(f"‚ÑπÔ∏è  Message INFO - Niveau {level}")
            logger.warning(f"‚ö†Ô∏è  Message WARNING - Niveau {level}")
            logger.error(f"‚ùå Message ERROR - Niveau {level}")
            
        except Exception as e:
            print(f"‚ùå Erreur test niveau {level}: {e}")
        
        finally:
            # Nettoyage
            import shutil
            shutil.rmtree(config_dir, ignore_errors=True)


def test_dynamic_verbosity_change():
    """Test du changement dynamique de verbosit√©"""
    
    print("\nüîÑ Test changement dynamique de verbosit√©")
    print("=" * 50)
    
    # Configuration initiale
    config_dir = create_test_config("Moyenne")
    
    try:
        config = ConfigManager(config_dir)
        logger = logging.getLogger("dynamic_test")
        
        # Test initial
        setup_application_logging(config)
        logger.info("üìä Configuration initiale: Moyenne")
        
        # Changement vers Debug
        success = VerbosityManager.change_verbosity("Debug", config)
        assert success, "Changement vers Debug √©chou√©"
        logger.debug("üîç Maintenant en mode Debug")
        
        # Changement vers Faible
        success = VerbosityManager.change_verbosity("Faible", config)
        assert success, "Changement vers Faible √©chou√©"
        logger.warning("‚ö†Ô∏è  Maintenant en mode Faible")
        logger.info("‚ÑπÔ∏è  Ce message INFO ne devrait pas s'afficher en mode Faible")
        
        print("‚úÖ Test changement dynamique r√©ussi")
        
    except Exception as e:
        print(f"‚ùå Erreur test changement dynamique: {e}")
    
    finally:
        import shutil
        shutil.rmtree(config_dir, ignore_errors=True)


def test_config_manager_logging_methods():
    """Test des m√©thodes sp√©cifiques au logging du ConfigManager"""
    
    print("\n‚öôÔ∏è  Test m√©thodes ConfigManager logging")
    print("=" * 50)
    
    config_dir = create_test_config("Debug")
    
    try:
        config = ConfigManager(config_dir)
        
        # Test r√©cup√©ration verbosit√©
        verbosity = config.get_logging_verbosity()
        assert verbosity == "Debug", f"Verbosit√© attendue: Debug, obtenue: {verbosity}"
        print(f"‚úÖ get_logging_verbosity(): {verbosity}")
        
        # Test niveaux disponibles
        levels = config.get_available_verbosity_levels()
        expected_levels = ["Faible", "Moyenne", "Debug"]
        assert levels == expected_levels, f"Niveaux attendus: {expected_levels}, obtenus: {levels}"
        print(f"‚úÖ get_available_verbosity_levels(): {levels}")
        
        # Test descriptions
        description = config.get_verbosity_description("Debug")
        assert description, "Description Debug vide"
        print(f"‚úÖ get_verbosity_description('Debug'): {description}")
        
        # Test changement de verbosit√©
        success = config.set_logging_verbosity("Faible")
        assert success, "Changement verbosit√© √©chou√©"
        new_verbosity = config.get_logging_verbosity()
        assert new_verbosity == "Faible", f"Nouvelle verbosit√© attendue: Faible, obtenue: {new_verbosity}"
        print(f"‚úÖ set_logging_verbosity('Faible'): {new_verbosity}")
        
        # Test niveau invalide
        success = config.set_logging_verbosity("Inexistant")
        assert not success, "Changement vers niveau invalide devrait √©chouer"
        print("‚úÖ Validation niveau invalide fonctionne")
        
        print("‚úÖ Tous les tests ConfigManager r√©ussis")
        
    except Exception as e:
        print(f"‚ùå Erreur test ConfigManager: {e}")
    
    finally:
        import shutil
        shutil.rmtree(config_dir, ignore_errors=True)


def main():
    """Point d'entr√©e principal des tests"""
    
    print("üß™ Tests du syst√®me de verbosit√© logging")
    print("=" * 70)
    
    try:
        # Tests individuels
        test_verbosity_levels()
        test_dynamic_verbosity_change()
        test_config_manager_logging_methods()
        
        print("\n" + "=" * 70)
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("=" * 70)
        
    except Exception as e:
        print(f"\n‚ùå ERREUR GLOBALE: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)