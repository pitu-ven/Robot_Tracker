# robot_tracker/main.py
# Version 1.1 - Ajout gestion verbosit√© logging
# Modification: Configuration du logging selon niveau de verbosit√© choisi

import sys
import logging
from pathlib import Path
from PyQt6.QtWidgets import QApplication
from ui.main_window import MainWindow
from core.config_manager import ConfigManager
from utils.logging_utils import setup_application_logging


def setup_logging_directory():
    """Cr√©e le dossier logs s'il n'existe pas"""
    logs_dir = Path("logs")
    if not logs_dir.exists():
        logs_dir.mkdir(exist_ok=True)
        print(f"üìÅ Dossier logs cr√©√©: {logs_dir.absolute()}")


def main():
    """Point d'entr√©e principal de l'application"""
    
    # Cr√©ation du dossier logs avant toute configuration
    setup_logging_directory()
    
    # Chargement de la configuration
    config = ConfigManager()
    
    # V√©rification du mode de verbosit√© pour optimiser le chargement
    verbosity = config.get_logging_verbosity()
    
    # Si mode Faible, rechargement silencieux des configurations
    if verbosity == "Faible":
        from utils.system_logging_suppressor import QuietConfigManager
        QuietConfigManager.load_configs_quietly(config)
    
    # Configuration du logging selon la verbosit√© choisie
    setup_application_logging(config)
    
    # R√©cup√©ration du logger apr√®s configuration
    logger = logging.getLogger(__name__)
    
    # Messages de d√©marrage adapt√©s au niveau de verbosit√©
    if verbosity != "Faible":
        available_levels = config.get_available_verbosity_levels()
        
        logger.info("üöÄ D√©marrage Robot Trajectory Controller")
        logger.info(f"üìã Verbosit√© des logs: {verbosity}")
        logger.debug(f"üîß Niveaux disponibles: {available_levels}")
    
    # Cr√©ation de l'application PyQt6
    app = QApplication(sys.argv)
    
    # Application du style depuis la config
    style = config.get('ui', 'theme.style', 'Fusion')
    app.setStyle(style)
    
    if verbosity == "Debug":
        logger.debug(f"üé® Style appliqu√©: {style}")
    
    # Cr√©ation de la fen√™tre principale
    if verbosity not in ["Faible"]:
        logger.info("üñºÔ∏è Initialisation de l'interface principale...")
    
    window = MainWindow(config)
    window.show()
    
    if verbosity not in ["Faible"]:
        logger.info("‚úÖ Application pr√™te")
    
    # Lancement de la boucle principale
    try:
        return app.exec()
    except KeyboardInterrupt:
        if verbosity != "Faible":
            logger.info("‚èπÔ∏è Arr√™t demand√© par l'utilisateur")
        return 0
    except Exception as e:
        if verbosity != "Faible":
            logger.error(f"‚ùå Erreur fatale: {e}")
        return 1
    finally:
        if verbosity == "Debug":
            logger.info("üîÑ Fermeture de l'application")


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)